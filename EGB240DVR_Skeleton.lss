
EGB240DVR_Skeleton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000188  00800100  00001c54  00001ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000069a  00800288  00800288  00001e70  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00001ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007698  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001db9  00000000  00000000  000099f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ad71  00000000  00000000  0000b7b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f60  00000000  00000000  00016524  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001170  00000000  00000000  00017484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009ef0  00000000  00000000  000185f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000720  00000000  00000000  000224e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ba c0       	rjmp	.+372    	; 0x176 <__ctors_end>
       2:	00 00       	nop
       4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
       6:	00 00       	nop
       8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
       a:	00 00       	nop
       c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
       e:	00 00       	nop
      10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
      12:	00 00       	nop
      14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
      16:	00 00       	nop
      18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
      1e:	00 00       	nop
      20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
      22:	00 00       	nop
      24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__vector_10>
      2c:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__vector_11>
      30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
      32:	00 00       	nop
      34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
      36:	00 00       	nop
      38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
      3e:	00 00       	nop
      40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
      42:	00 00       	nop
      44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
      46:	00 00       	nop
      48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
      4e:	00 00       	nop
      50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c1       	rjmp	.+708    	; 0x31a <__vector_21>
      56:	00 00       	nop
      58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
      5e:	00 00       	nop
      60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
      62:	00 00       	nop
      64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
      66:	00 00       	nop
      68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
      6e:	00 00       	nop
      70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
      72:	00 00       	nop
      74:	d3 c0       	rjmp	.+422    	; 0x21c <__vector_29>
      76:	00 00       	nop
      78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
      7a:	00 00       	nop
      7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
      7e:	00 00       	nop
      80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
      82:	00 00       	nop
      84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
      86:	00 00       	nop
      88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
      8a:	00 00       	nop
      8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
      8e:	00 00       	nop
      90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
      92:	00 00       	nop
      94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
      96:	00 00       	nop
      98:	8a c0       	rjmp	.+276    	; 0x1ae <__bad_interrupt>
      9a:	00 00       	nop
      9c:	88 c0       	rjmp	.+272    	; 0x1ae <__bad_interrupt>
      9e:	00 00       	nop
      a0:	86 c0       	rjmp	.+268    	; 0x1ae <__bad_interrupt>
      a2:	00 00       	nop
      a4:	84 c0       	rjmp	.+264    	; 0x1ae <__bad_interrupt>
      a6:	00 00       	nop
      a8:	82 c0       	rjmp	.+260    	; 0x1ae <__bad_interrupt>
      aa:	00 00       	nop

000000ac <__trampolines_end>:
      ac:	00 01       	movw	r0, r0
      ae:	00 00       	nop
      b0:	59 01       	movw	r10, r18
      b2:	12 00       	.word	0x0012	; ????
      b4:	02 00       	.word	0x0002	; ????
      b6:	00 16       	cp	r0, r16
      b8:	01 43       	sbci	r16, 0x31	; 49
      ba:	00 03       	mulsu	r16, r16
      bc:	00 00       	nop
      be:	12 01       	movw	r2, r4
      c0:	04 01       	movw	r0, r8
      c2:	03 09       	sbc	r16, r3
      c4:	04 fc       	sbrc	r0, 4
      c6:	00 14       	cp	r0, r0
      c8:	02 03       	mulsu	r16, r18
      ca:	09 04       	cpc	r0, r9
      cc:	e4 00       	.word	0x00e4	; ????
      ce:	16 03       	mulsu	r17, r22
      d0:	03 09       	sbc	r16, r3
      d2:	04 d6       	rcall	.+3080   	; 0xcdc <send_cmd+0x82>
      d4:	00 0c       	add	r0, r0

000000d6 <string3>:
      d6:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000000e4 <string2>:
      e4:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
      f4:	69 00 61 00 6c 00 00 00                             i.a.l...

000000fc <string1>:
      fc:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
     10c:	6d 00 65 00 00 00                                   m.e...

00000112 <string0>:
     112:	04 03 09 04                                         ....

00000116 <config1_descriptor>:
     116:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     126:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     136:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     146:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     156:	40 00 00                                            @..

00000159 <device_descriptor>:
     159:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     169:	03 01                                               ..

0000016b <endpoint_config_table>:
     16b:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	da e0       	ldi	r29, 0x0A	; 10
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	12 e0       	ldi	r17, 0x02	; 2
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	e4 e5       	ldi	r30, 0x54	; 84
     18a:	fc e1       	ldi	r31, 0x1C	; 28
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	a8 38       	cpi	r26, 0x88	; 136
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
     198:	29 e0       	ldi	r18, 0x09	; 9
     19a:	a8 e8       	ldi	r26, 0x88	; 136
     19c:	b2 e0       	ldi	r27, 0x02	; 2
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	a2 32       	cpi	r26, 0x22	; 34
     1a4:	b2 07       	cpc	r27, r18
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	2d d0       	rcall	.+90     	; 0x204 <main>
     1aa:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <_exit>

000001ae <__bad_interrupt>:
     1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <pageEmpty>:
}

// CALLED FROM BUFFER MODULE WHEN A NEW PAGE HAS BEEN EMPTIED
void pageEmpty() {
	// TODO: Implement code to handle "page empty" callback 
}
     1b0:	08 95       	ret

000001b2 <pageFull>:
	if(!(--pageCount)) {
     1b2:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pageCount>
     1b6:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pageCount+0x1>
     1ba:	01 97       	sbiw	r24, 0x01	; 1
     1bc:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <pageCount+0x1>
     1c0:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <pageCount>
     1c4:	89 2b       	or	r24, r25
     1c6:	39 f0       	breq	.+14     	; 0x1d6 <pageFull+0x24>
		newPage = 1;	// Flag new page is ready to write to SD card
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <newPage+0x1>
     1d0:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <newPage>
}
     1d4:	08 95       	ret
		adc_stop();		// Stop recording (disable new ADC conversions)
     1d6:	1f d0       	rcall	.+62     	; 0x216 <adc_stop>
		stop = 1;		// Flag recording complete
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
     1de:	08 95       	ret

000001e0 <init>:
	cli();			// Disable interrupts
     1e0:	f8 94       	cli
	CLKPR = 0x80;	// Prescaler change enable
     1e2:	e1 e6       	ldi	r30, 0x61	; 97
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 e8       	ldi	r24, 0x80	; 128
     1e8:	80 83       	st	Z, r24
	CLKPR = 0x00;	// Prescaler /1, 16 MHz
     1ea:	10 82       	st	Z, r1
	PLLFRQ = 0x6A; // PLL = 96 MHz, USB = 48 MHz, TIM4 = 64 MHz
     1ec:	8a e6       	ldi	r24, 0x6A	; 106
     1ee:	82 bf       	out	0x32, r24	; 50
	serial_init();	// Initialise USB serial interface (debug)
     1f0:	81 d0       	rcall	.+258    	; 0x2f4 <serial_init>
	timer_init();	// Initialise timer (used by FatFs library)
     1f2:	8a d0       	rcall	.+276    	; 0x308 <timer_init>
     1f4:	68 ed       	ldi	r22, 0xD8	; 216
	buffer_init(pageFull, pageEmpty);  // Initialise circular buffer (must specify callback functions)
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	89 ed       	ldi	r24, 0xD9	; 217
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	34 d0       	rcall	.+104    	; 0x266 <buffer_init>
	adc_init();		// Initialise ADC
     1fe:	04 d0       	rcall	.+8      	; 0x208 <adc_init>
     200:	78 94       	sei
	sei();			// Enable interrupts
     202:	cd c0       	rjmp	.+410    	; 0x39e <wave_init>

00000204 <main>:
	wave_init();	// Initialise WAVE file interface
     204:	ed df       	rcall	.-38     	; 0x1e0 <init>
     206:	ff cf       	rjmp	.-2      	; 0x206 <main+0x2>

00000208 <adc_init>:

/************************************************************************/
/* PUBLIC/USER FUNCTIONS                                                */
/************************************************************************/
void adc_init() {
	ADMUX = 0x60;	// Left adjust result, AREF = AVCC
     208:	80 e6       	ldi	r24, 0x60	; 96
     20a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRB = 0x03;	// Select Timer0 CMPA as trigger	
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
}
     214:	08 95       	ret

00000216 <adc_stop>:
void adc_start() {
	ADCSRA = 0xAE;	// /64 prescaler (250 kHz clock), enable interrupts, ADC enable
}

void adc_stop() {
	ADCSRA = 0x00;
     216:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}
     21a:	08 95       	ret

0000021c <__vector_29>:
/**
 * ISR: ADC conversion complete
 * 
 * Interrupt service routine which executes on completion of ADC conversion.
 */
ISR(ADC_vect) {
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
     226:	2f 93       	push	r18
     228:	3f 93       	push	r19
     22a:	4f 93       	push	r20
     22c:	5f 93       	push	r21
     22e:	6f 93       	push	r22
     230:	7f 93       	push	r23
     232:	8f 93       	push	r24
     234:	9f 93       	push	r25
     236:	af 93       	push	r26
     238:	bf 93       	push	r27
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
	uint8_t result = ADCH;	//Read result
     23e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	buffer_queue(result);	//Store result into buffer
     242:	26 d0       	rcall	.+76     	; 0x290 <buffer_queue>
     244:	ff 91       	pop	r31
     246:	ef 91       	pop	r30
     248:	bf 91       	pop	r27
     24a:	af 91       	pop	r26
     24c:	9f 91       	pop	r25
     24e:	8f 91       	pop	r24
     250:	7f 91       	pop	r23
     252:	6f 91       	pop	r22
     254:	5f 91       	pop	r21
     256:	4f 91       	pop	r20
     258:	3f 91       	pop	r19
     25a:	2f 91       	pop	r18
     25c:	0f 90       	pop	r0
     25e:	0f be       	out	0x3f, r0	; 63
     260:	0f 90       	pop	r0
     262:	1f 90       	pop	r1
     264:	18 95       	reti

00000266 <buffer_init>:
 *    pFuncPageFull - Pointer to function to execute on "page full"
 *    pFuncPageEmpty - Pointer to function to execute on "page empty"
 */
void buffer_init(void (*pFuncPageFull)(void), void (*pFuncPageEmpty)(void)) {
	// Reset read/write pointers
	pHead = pPage0;
     266:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pPage0>
     26a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <pPage0+0x1>
     26e:	30 93 9f 02 	sts	0x029F, r19	; 0x80029f <pHead+0x1>
     272:	20 93 9e 02 	sts	0x029E, r18	; 0x80029e <pHead>
	pTail = pPage0;
     276:	30 93 a1 06 	sts	0x06A1, r19	; 0x8006a1 <pTail+0x1>
     27a:	20 93 a0 06 	sts	0x06A0, r18	; 0x8006a0 <pTail>
	
	// Assign user supplier callback functions
	callbackPageFull = pFuncPageFull;
     27e:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <callbackPageFull+0x1>
     282:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <callbackPageFull>
	callbackPageEmpty = pFuncPageEmpty;
     286:	70 93 9d 02 	sts	0x029D, r23	; 0x80029d <callbackPageEmpty+0x1>
     28a:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <callbackPageEmpty>
}
     28e:	08 95       	ret

00000290 <buffer_queue>:
 *
 * Parameters:
 *    word - sample (unsigned 8-bit integer) to add to queue (buffer)
 */
void buffer_queue(uint8_t word) {
	*(pHead++) = word;
     290:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <pHead>
     294:	f0 91 9f 02 	lds	r31, 0x029F	; 0x80029f <pHead+0x1>
     298:	9f 01       	movw	r18, r30
     29a:	2f 5f       	subi	r18, 0xFF	; 255
     29c:	3f 4f       	sbci	r19, 0xFF	; 255
     29e:	30 93 9f 02 	sts	0x029F, r19	; 0x80029f <pHead+0x1>
     2a2:	20 93 9e 02 	sts	0x029E, r18	; 0x80029e <pHead>
     2a6:	80 83       	st	Z, r24
	
	if (pHead == pPage1) {
     2a8:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <pHead>
     2ac:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <pHead+0x1>
     2b0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pPage1>
     2b4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pPage1+0x1>
     2b8:	82 17       	cp	r24, r18
     2ba:	93 07       	cpc	r25, r19
     2bc:	81 f0       	breq	.+32     	; 0x2de <buffer_queue+0x4e>
		callbackPageFull();
	} else if (pHead == pEnd) {
     2be:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <pEnd>
     2c2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <pEnd+0x1>
     2c6:	82 17       	cp	r24, r18
     2c8:	93 07       	cpc	r25, r19
     2ca:	09 f0       	breq	.+2      	; 0x2ce <buffer_queue+0x3e>
		pHead = pPage0;
		callbackPageFull();
	}	
}
     2cc:	08 95       	ret
		pHead = pPage0;
     2ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pPage0>
     2d2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pPage0+0x1>
     2d6:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <pHead+0x1>
     2da:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <pHead>
		callbackPageFull();
     2de:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <callbackPageFull>
     2e2:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <callbackPageFull+0x1>
     2e6:	09 94       	ijmp

000002e8 <serial_getchar>:
	return usb_serial_putchar(c);
}

static uint8_t serial_getchar(FILE *stream) {
	//wait for character (blocking)
	while(!usb_serial_available());
     2e8:	b8 d7       	rcall	.+3952   	; 0x125a <usb_serial_available>
     2ea:	88 23       	and	r24, r24
	//read a character from the USB serial interface 
	return usb_serial_getchar();
     2ec:	e9 f3       	breq	.-6      	; 0x2e8 <serial_getchar>
     2ee:	8c c7       	rjmp	.+3864   	; 0x1208 <usb_serial_getchar>
}
     2f0:	08 95       	ret

000002f2 <serial_putchar>:
	return usb_serial_putchar(c);
     2f2:	d0 c7       	rjmp	.+4000   	; 0x1294 <usb_serial_putchar>

000002f4 <serial_init>:
 * Initialises the serial module for use. This function must be called
 * prior to using any IO functions. This function initialises the USB
 * interface and creates the input and output serial streams.
 */
void serial_init() {
	usb_init();			  // Initialise USB serial
     2f4:	70 d7       	rcall	.+3808   	; 0x11d6 <usb_init>
	stdin = &stdinout;
     2f6:	ec e1       	ldi	r30, 0x1C	; 28
     2f8:	f9 e0       	ldi	r31, 0x09	; 9
     2fa:	86 e0       	ldi	r24, 0x06	; 6
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	91 83       	std	Z+1, r25	; 0x01
     300:	80 83       	st	Z, r24
	stdout = &stdinout;
     302:	93 83       	std	Z+3, r25	; 0x03
     304:	82 83       	std	Z+2, r24	; 0x02
}
     306:	08 95       	ret

00000308 <timer_init>:
 * 
 * Initialises and starts Timer0 with a 64 us period (15.625 kHz).
 * Assumes a 16 MHz system clock. Interrupts at counter top.
 */
void timer_init() {
	OCR0A = 128;	// 15.625 kHz (64 us period)
     308:	80 e8       	ldi	r24, 0x80	; 128
     30a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0x02;	// CTC mode
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = 0x02;  // Interrupt on CMPA (top)
     310:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	TCCR0B = 0x02;  // Start timer, /8 prescaler
     314:	85 bd       	out	0x25, r24	; 37

	DDRD |= (1<<PIND7);		// Set PORTD7 (LED4) as output
     316:	57 9a       	sbi	0x0a, 7	; 10
}
     318:	08 95       	ret

0000031a <__vector_21>:
 * Interrupt service routine for Timer0 CompareA vector.
 * Corresponds to top of timer for CTC mode.
 *
 * Used to generate regular, timed events.
 */
ISR(TIMER0_COMPA_vect) {
     31a:	1f 92       	push	r1
     31c:	0f 92       	push	r0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	0f 92       	push	r0
     322:	11 24       	eor	r1, r1
     324:	2f 93       	push	r18
     326:	3f 93       	push	r19
     328:	4f 93       	push	r20
     32a:	5f 93       	push	r21
     32c:	6f 93       	push	r22
     32e:	7f 93       	push	r23
     330:	8f 93       	push	r24
     332:	9f 93       	push	r25
     334:	af 93       	push	r26
     336:	bf 93       	push	r27
     338:	ef 93       	push	r30
     33a:	ff 93       	push	r31
	
	// Timer to service FatFs module (~10 ms interval)
	if (!(--timer_fatfs)) {
     33c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timer_fatfs>
     340:	81 50       	subi	r24, 0x01	; 1
     342:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timer_fatfs>
     346:	88 23       	and	r24, r24
     348:	29 f1       	breq	.+74     	; 0x394 <__vector_21+0x7a>
		timer_fatfs = TIMER_INTERVAL_FATFS;
		disk_timerproc();
	}
	
	// Timer to flash debug LED (1 Hz, 50% duty cycle flash)
	if (!(--timer_led)) {
     34a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <timer_led>
     34e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <timer_led+0x1>
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timer_led+0x1>
     358:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer_led>
     35c:	89 2b       	or	r24, r25
     35e:	49 f4       	brne	.+18     	; 0x372 <__vector_21+0x58>
		timer_led = TIMER_INTERVAL_LED;
     360:	85 e8       	ldi	r24, 0x85	; 133
     362:	9e e1       	ldi	r25, 0x1E	; 30
     364:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timer_led+0x1>
     368:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer_led>
		PORTD ^= (1<<PIND7);
     36c:	8b b1       	in	r24, 0x0b	; 11
     36e:	80 58       	subi	r24, 0x80	; 128
     370:	8b b9       	out	0x0b, r24	; 11
	}
	
     372:	ff 91       	pop	r31
     374:	ef 91       	pop	r30
     376:	bf 91       	pop	r27
     378:	af 91       	pop	r26
     37a:	9f 91       	pop	r25
     37c:	8f 91       	pop	r24
     37e:	7f 91       	pop	r23
     380:	6f 91       	pop	r22
     382:	5f 91       	pop	r21
     384:	4f 91       	pop	r20
     386:	3f 91       	pop	r19
     388:	2f 91       	pop	r18
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti
		timer_fatfs = TIMER_INTERVAL_FATFS;
     394:	8c e9       	ldi	r24, 0x9C	; 156
     396:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timer_fatfs>
		disk_timerproc();
     39a:	09 d7       	rcall	.+3602   	; 0x11ae <disk_timerproc>
     39c:	d6 cf       	rjmp	.-84     	; 0x34a <__vector_21+0x30>

0000039e <wave_init>:
 * Must be called prior to calling any other function in the WAVE module.
 */
void wave_init() {
	FRESULT result;
	
	result = f_mount(&fs, "/", 1);	// force mount SD card root directory
     39e:	41 e0       	ldi	r20, 0x01	; 1
     3a0:	62 ef       	ldi	r22, 0xF2	; 242
     3a2:	71 e0       	ldi	r23, 0x01	; 1
     3a4:	82 ea       	ldi	r24, 0xA2	; 162
     3a6:	96 e0       	ldi	r25, 0x06	; 6
     3a8:	ef d3       	rcall	.+2014   	; 0xb88 <f_mount>

	// If error occurs, write status to console
	if (result) printf("f_mount returned error code: %d\n", result);
     3aa:	81 11       	cpse	r24, r1
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <wave_init+0x12>
}
     3ae:	08 95       	ret
	if (result) printf("f_mount returned error code: %d\n", result);
     3b0:	1f 92       	push	r1
     3b2:	8f 93       	push	r24
     3b4:	84 ef       	ldi	r24, 0xF4	; 244
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <printf>
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
}
     3c8:	08 95       	ret

000003ca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	ec 01       	movw	r28, r24
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
     3d0:	a8 81       	ld	r26, Y
     3d2:	b9 81       	ldd	r27, Y+1	; 0x01
     3d4:	10 97       	sbiw	r26, 0x00	; 0
     3d6:	c9 f0       	breq	.+50     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     3d8:	4c 91       	ld	r20, X
     3da:	41 32       	cpi	r20, 0x21	; 33
     3dc:	68 f0       	brcs	.+26     	; 0x3f8 <get_ldnumber+0x2e>
     3de:	4a 33       	cpi	r20, 0x3A	; 58
     3e0:	a1 f0       	breq	.+40     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     3e2:	fd 01       	movw	r30, r26
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <get_ldnumber+0x22>
     3e6:	9a 33       	cpi	r25, 0x3A	; 58
     3e8:	61 f0       	breq	.+24     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     3ea:	f9 01       	movw	r30, r18
     3ec:	9f 01       	movw	r18, r30
     3ee:	2f 5f       	subi	r18, 0xFF	; 255
     3f0:	3f 4f       	sbci	r19, 0xFF	; 255
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	91 32       	cpi	r25, 0x21	; 33
     3f6:	b8 f7       	brcc	.-18     	; 0x3e6 <get_ldnumber+0x1c>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	80 e0       	ldi	r24, 0x00	; 0
#endif
	}
	return vol;
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret
			i = *tp++ - '0'; 
     402:	11 96       	adiw	r26, 0x01	; 1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     404:	2a 17       	cp	r18, r26
     406:	3b 07       	cpc	r19, r27
     408:	29 f0       	breq	.+10     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
	int vol = -1;
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	9f ef       	ldi	r25, 0xFF	; 255
}
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
     414:	80 ed       	ldi	r24, 0xD0	; 208
     416:	84 0f       	add	r24, r20
     418:	82 30       	cpi	r24, 0x02	; 2
     41a:	b8 f7       	brcc	.-18     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
			i = *tp++ - '0'; 
     41c:	24 2f       	mov	r18, r20
     41e:	20 53       	subi	r18, 0x30	; 48
     420:	33 0b       	sbc	r19, r19
     422:	c9 01       	movw	r24, r18
					*path = ++tt;
     424:	32 96       	adiw	r30, 0x02	; 2
     426:	f9 83       	std	Y+1, r31	; 0x01
     428:	e8 83       	st	Y, r30
     42a:	e8 cf       	rjmp	.-48     	; 0x3fc <get_ldnumber+0x32>

0000042c <sync_window.part.2>:
FRESULT sync_window (	/* FR_OK:succeeded, !=0:error */
     42c:	7f 92       	push	r7
     42e:	8f 92       	push	r8
     430:	9f 92       	push	r9
     432:	af 92       	push	r10
     434:	bf 92       	push	r11
     436:	cf 92       	push	r12
     438:	df 92       	push	r13
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	ec 01       	movw	r28, r24
		wsect = fs->winsect;	/* Current sector number */
     448:	ca a4       	ldd	r12, Y+42	; 0x2a
     44a:	db a4       	ldd	r13, Y+43	; 0x2b
     44c:	ec a4       	ldd	r14, Y+44	; 0x2c
     44e:	fd a4       	ldd	r15, Y+45	; 0x2d
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
     450:	5c 01       	movw	r10, r24
     452:	0e e2       	ldi	r16, 0x2E	; 46
     454:	a0 0e       	add	r10, r16
     456:	b1 1c       	adc	r11, r1
     458:	01 e0       	ldi	r16, 0x01	; 1
     45a:	10 e0       	ldi	r17, 0x00	; 0
     45c:	a7 01       	movw	r20, r14
     45e:	96 01       	movw	r18, r12
     460:	b5 01       	movw	r22, r10
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	34 d6       	rcall	.+3176   	; 0x10ce <disk_write>
     466:	78 2e       	mov	r7, r24
     468:	81 11       	cpse	r24, r1
     46a:	42 c0       	rjmp	.+132    	; 0x4f0 <sync_window.part.2+0xc4>
			fs->wflag = 0;
     46c:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
     46e:	8e 89       	ldd	r24, Y+22	; 0x16
     470:	9f 89       	ldd	r25, Y+23	; 0x17
     472:	a8 8d       	ldd	r26, Y+24	; 0x18
     474:	b9 8d       	ldd	r27, Y+25	; 0x19
     476:	4e 8d       	ldd	r20, Y+30	; 0x1e
     478:	5f 8d       	ldd	r21, Y+31	; 0x1f
     47a:	68 a1       	ldd	r22, Y+32	; 0x20
     47c:	79 a1       	ldd	r23, Y+33	; 0x21
     47e:	97 01       	movw	r18, r14
     480:	86 01       	movw	r16, r12
     482:	04 1b       	sub	r16, r20
     484:	15 0b       	sbc	r17, r21
     486:	26 0b       	sbc	r18, r22
     488:	37 0b       	sbc	r19, r23
     48a:	b9 01       	movw	r22, r18
     48c:	a8 01       	movw	r20, r16
     48e:	48 17       	cp	r20, r24
     490:	59 07       	cpc	r21, r25
     492:	6a 07       	cpc	r22, r26
     494:	7b 07       	cpc	r23, r27
     496:	e8 f4       	brcc	.+58     	; 0x4d2 <sync_window.part.2+0xa6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     498:	8b 80       	ldd	r8, Y+3	; 0x03
     49a:	91 2c       	mov	r9, r1
     49c:	12 e0       	ldi	r17, 0x02	; 2
     49e:	81 16       	cp	r8, r17
     4a0:	91 04       	cpc	r9, r1
     4a2:	28 f4       	brcc	.+10     	; 0x4ae <sync_window.part.2+0x82>
     4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <sync_window.part.2+0xa6>
     4a6:	8e 89       	ldd	r24, Y+22	; 0x16
     4a8:	9f 89       	ldd	r25, Y+23	; 0x17
     4aa:	a8 8d       	ldd	r26, Y+24	; 0x18
     4ac:	b9 8d       	ldd	r27, Y+25	; 0x19
					wsect += fs->fsize;
     4ae:	c8 0e       	add	r12, r24
     4b0:	d9 1e       	adc	r13, r25
     4b2:	ea 1e       	adc	r14, r26
     4b4:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
     4b6:	01 e0       	ldi	r16, 0x01	; 1
     4b8:	10 e0       	ldi	r17, 0x00	; 0
     4ba:	a7 01       	movw	r20, r14
     4bc:	96 01       	movw	r18, r12
     4be:	b5 01       	movw	r22, r10
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	05 d6       	rcall	.+3082   	; 0x10ce <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     4c4:	21 e0       	ldi	r18, 0x01	; 1
     4c6:	82 1a       	sub	r8, r18
     4c8:	91 08       	sbc	r9, r1
     4ca:	31 e0       	ldi	r19, 0x01	; 1
     4cc:	83 16       	cp	r8, r19
     4ce:	91 04       	cpc	r9, r1
     4d0:	51 f7       	brne	.-44     	; 0x4a6 <sync_window.part.2+0x7a>
}
     4d2:	87 2d       	mov	r24, r7
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	7f 90       	pop	r7
     4ee:	08 95       	ret
			res = FR_DISK_ERR;
     4f0:	77 24       	eor	r7, r7
     4f2:	73 94       	inc	r7
	return res;
     4f4:	ee cf       	rjmp	.-36     	; 0x4d2 <sync_window.part.2+0xa6>

000004f6 <move_window.part.3>:
FRESULT move_window (	/* FR_OK(0):succeeded, !=0:error */
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	ec 01       	movw	r28, r24
     508:	6a 01       	movw	r12, r20
     50a:	7b 01       	movw	r14, r22
	if (fs->wflag) {	/* Write back the sector if it is dirty */
     50c:	8c 81       	ldd	r24, Y+4	; 0x04
     50e:	81 11       	cpse	r24, r1
     510:	1e c0       	rjmp	.+60     	; 0x54e <move_window.part.3+0x58>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
     512:	01 e0       	ldi	r16, 0x01	; 1
     514:	10 e0       	ldi	r17, 0x00	; 0
     516:	a7 01       	movw	r20, r14
     518:	96 01       	movw	r18, r12
     51a:	be 01       	movw	r22, r28
     51c:	62 5d       	subi	r22, 0xD2	; 210
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	71 d5       	rcall	.+2786   	; 0x1006 <disk_read>
     524:	81 11       	cpse	r24, r1
     526:	0d c0       	rjmp	.+26     	; 0x542 <move_window.part.3+0x4c>
			fs->winsect = sector;
     528:	ca a6       	std	Y+42, r12	; 0x2a
     52a:	db a6       	std	Y+43, r13	; 0x2b
     52c:	ec a6       	std	Y+44, r14	; 0x2c
     52e:	fd a6       	std	Y+45, r15	; 0x2d
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	cf 90       	pop	r12
     540:	08 95       	ret
				res = FR_DISK_ERR;
     542:	81 e0       	ldi	r24, 0x01	; 1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
     544:	cc 24       	eor	r12, r12
     546:	ca 94       	dec	r12
     548:	dc 2c       	mov	r13, r12
     54a:	76 01       	movw	r14, r12
     54c:	ed cf       	rjmp	.-38     	; 0x528 <move_window.part.3+0x32>
     54e:	ce 01       	movw	r24, r28
     550:	6d df       	rcall	.-294    	; 0x42c <sync_window.part.2>
		if (res == FR_OK) {			/* Fill sector window with new data */
     552:	88 23       	and	r24, r24
     554:	f1 f2       	breq	.-68     	; 0x512 <move_window.part.3+0x1c>
     556:	ec cf       	rjmp	.-40     	; 0x530 <move_window.part.3+0x3a>

00000558 <check_fs>:
static
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
     55e:	1c 82       	std	Y+4, r1	; 0x04
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	9f ef       	ldi	r25, 0xFF	; 255
     564:	dc 01       	movw	r26, r24
     566:	8a a7       	std	Y+42, r24	; 0x2a
     568:	9b a7       	std	Y+43, r25	; 0x2b
     56a:	ac a7       	std	Y+44, r26	; 0x2c
     56c:	bd a7       	std	Y+45, r27	; 0x2d
	if (sector != fs->winsect) {	/* Window offset changed? */
     56e:	4f 3f       	cpi	r20, 0xFF	; 255
     570:	2f ef       	ldi	r18, 0xFF	; 255
     572:	52 07       	cpc	r21, r18
     574:	62 07       	cpc	r22, r18
     576:	72 07       	cpc	r23, r18
     578:	21 f0       	breq	.+8      	; 0x582 <check_fs+0x2a>
     57a:	ce 01       	movw	r24, r28
     57c:	bc df       	rcall	.-136    	; 0x4f6 <move_window.part.3>
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
     57e:	81 11       	cpse	r24, r1
     580:	2d c0       	rjmp	.+90     	; 0x5dc <check_fs+0x84>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
     582:	fe 01       	movw	r30, r28
     584:	e4 5d       	subi	r30, 0xD4	; 212
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	85 35       	cpi	r24, 0x55	; 85
     58e:	9a 4a       	sbci	r25, 0xAA	; 170
     590:	09 f5       	brne	.+66     	; 0x5d4 <check_fs+0x7c>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
     592:	fe 01       	movw	r30, r28
     594:	ec 59       	subi	r30, 0x9C	; 156
     596:	ff 4f       	sbci	r31, 0xFF	; 255
     598:	80 81       	ld	r24, Z
     59a:	91 81       	ldd	r25, Z+1	; 0x01
     59c:	a2 81       	ldd	r26, Z+2	; 0x02
     59e:	b3 81       	ldd	r27, Z+3	; 0x03
     5a0:	bb 27       	eor	r27, r27
     5a2:	86 34       	cpi	r24, 0x46	; 70
     5a4:	91 44       	sbci	r25, 0x41	; 65
     5a6:	a4 45       	sbci	r26, 0x54	; 84
     5a8:	b1 05       	cpc	r27, r1
     5aa:	81 f0       	breq	.+32     	; 0x5cc <check_fs+0x74>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     5ac:	c0 58       	subi	r28, 0x80	; 128
     5ae:	df 4f       	sbci	r29, 0xFF	; 255
     5b0:	48 81       	ld	r20, Y
     5b2:	59 81       	ldd	r21, Y+1	; 0x01
     5b4:	6a 81       	ldd	r22, Y+2	; 0x02
     5b6:	7b 81       	ldd	r23, Y+3	; 0x03
     5b8:	77 27       	eor	r23, r23
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	46 34       	cpi	r20, 0x46	; 70
     5be:	51 44       	sbci	r21, 0x41	; 65
     5c0:	64 45       	sbci	r22, 0x54	; 84
     5c2:	71 05       	cpc	r23, r1
     5c4:	19 f0       	breq	.+6      	; 0x5cc <check_fs+0x74>
		return 0;

	return 1;
}
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	08 95       	ret
		return 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret
		return 2;
     5d4:	82 e0       	ldi	r24, 0x02	; 2
}
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret
		return 3;
     5dc:	83 e0       	ldi	r24, 0x03	; 3
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
     5e4:	2f 92       	push	r2
     5e6:	3f 92       	push	r3
     5e8:	4f 92       	push	r4
     5ea:	5f 92       	push	r5
     5ec:	6f 92       	push	r6
     5ee:	7f 92       	push	r7
     5f0:	8f 92       	push	r8
     5f2:	9f 92       	push	r9
     5f4:	af 92       	push	r10
     5f6:	bf 92       	push	r11
     5f8:	cf 92       	push	r12
     5fa:	df 92       	push	r13
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	a0 97       	sbiw	r28, 0x20	; 32
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
     618:	6c 01       	movw	r12, r24
     61a:	cb 01       	movw	r24, r22
     61c:	b4 2e       	mov	r11, r20
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
     61e:	d6 01       	movw	r26, r12
     620:	1d 92       	st	X+, r1
     622:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
     624:	d2 de       	rcall	.-604    	; 0x3ca <get_ldnumber>
     626:	7c 01       	movw	r14, r24
	if (vol < 0) return FR_INVALID_DRIVE;
     628:	eb e0       	ldi	r30, 0x0B	; 11
     62a:	7e 2e       	mov	r7, r30
     62c:	97 fd       	sbrc	r25, 7
     62e:	1f c0       	rjmp	.+62     	; 0x66e <find_volume+0x8a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
     630:	fc 01       	movw	r30, r24
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	e1 57       	subi	r30, 0x71	; 113
     638:	fd 4f       	sbci	r31, 0xFD	; 253
     63a:	00 81       	ld	r16, Z
     63c:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     63e:	01 15       	cp	r16, r1
     640:	11 05       	cpc	r17, r1
     642:	09 f4       	brne	.+2      	; 0x646 <find_volume+0x62>
     644:	c1 c1       	rjmp	.+898    	; 0x9c8 <find_volume+0x3e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
     646:	f6 01       	movw	r30, r12
     648:	11 83       	std	Z+1, r17	; 0x01
     64a:	00 83       	st	Z, r16

	if (fs->fs_type) {					/* If the volume has been mounted */
     64c:	d8 01       	movw	r26, r16
     64e:	8c 91       	ld	r24, X
     650:	88 23       	and	r24, r24
     652:	39 f1       	breq	.+78     	; 0x6a2 <find_volume+0xbe>
		stat = disk_status(fs->drv);
     654:	11 96       	adiw	r26, 0x01	; 1
     656:	8c 91       	ld	r24, X
     658:	cf d4       	rcall	.+2462   	; 0xff8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     65a:	80 fd       	sbrc	r24, 0
     65c:	22 c0       	rjmp	.+68     	; 0x6a2 <find_volume+0xbe>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     65e:	71 2c       	mov	r7, r1
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
     660:	bb 20       	and	r11, r11
     662:	29 f0       	breq	.+10     	; 0x66e <find_volume+0x8a>
     664:	b8 2f       	mov	r27, r24
     666:	b4 70       	andi	r27, 0x04	; 4
     668:	7b 2e       	mov	r7, r27
     66a:	82 fd       	sbrc	r24, 2
     66c:	a3 c1       	rjmp	.+838    	; 0x9b4 <find_volume+0x3d0>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
     66e:	87 2d       	mov	r24, r7
     670:	a0 96       	adiw	r28, 0x20	; 32
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	8f 90       	pop	r8
     694:	7f 90       	pop	r7
     696:	6f 90       	pop	r6
     698:	5f 90       	pop	r5
     69a:	4f 90       	pop	r4
     69c:	3f 90       	pop	r3
     69e:	2f 90       	pop	r2
     6a0:	08 95       	ret
	fs->fs_type = 0;					/* Clear the file system object */
     6a2:	f8 01       	movw	r30, r16
     6a4:	10 82       	st	Z, r1
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     6a6:	e1 82       	std	Z+1, r14	; 0x01
     6a8:	8e 2d       	mov	r24, r14
     6aa:	c9 d3       	rcall	.+1938   	; 0xe3e <disk_initialize>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
     6ac:	63 e0       	ldi	r22, 0x03	; 3
     6ae:	76 2e       	mov	r7, r22
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     6b0:	80 fd       	sbrc	r24, 0
     6b2:	dd cf       	rjmp	.-70     	; 0x66e <find_volume+0x8a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     6b4:	bb 20       	and	r11, r11
     6b6:	11 f0       	breq	.+4      	; 0x6bc <find_volume+0xd8>
     6b8:	82 fd       	sbrc	r24, 2
     6ba:	7c c1       	rjmp	.+760    	; 0x9b4 <find_volume+0x3d0>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	ba 01       	movw	r22, r20
     6c2:	c8 01       	movw	r24, r16
     6c4:	49 df       	rcall	.-366    	; 0x558 <check_fs>
     6c6:	78 2e       	mov	r7, r24
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     6c8:	f1 e0       	ldi	r31, 0x01	; 1
     6ca:	8f 17       	cp	r24, r31
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <find_volume+0xec>
     6ce:	3f c1       	rjmp	.+638    	; 0x94e <find_volume+0x36a>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     6d0:	b3 e0       	ldi	r27, 0x03	; 3
     6d2:	8b 17       	cp	r24, r27
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <find_volume+0xf4>
     6d6:	c9 c1       	rjmp	.+914    	; 0xa6a <find_volume+0x486>
	bsect = 0;
     6d8:	c1 2c       	mov	r12, r1
     6da:	d1 2c       	mov	r13, r1
     6dc:	76 01       	movw	r14, r12
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     6de:	81 11       	cpse	r24, r1
     6e0:	66 c1       	rjmp	.+716    	; 0x9ae <find_volume+0x3ca>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
     6e2:	f8 01       	movw	r30, r16
     6e4:	81 ad       	ldd	r24, Z+57	; 0x39
     6e6:	92 ad       	ldd	r25, Z+58	; 0x3a
     6e8:	81 15       	cp	r24, r1
     6ea:	92 40       	sbci	r25, 0x02	; 2
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <find_volume+0x10c>
     6ee:	5f c1       	rjmp	.+702    	; 0x9ae <find_volume+0x3ca>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
     6f0:	f8 01       	movw	r30, r16
     6f2:	ec 5b       	subi	r30, 0xBC	; 188
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	80 80       	ld	r8, Z
     6f8:	91 80       	ldd	r9, Z+1	; 0x01
     6fa:	b1 2c       	mov	r11, r1
     6fc:	a1 2c       	mov	r10, r1
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
     6fe:	81 14       	cp	r8, r1
     700:	91 04       	cpc	r9, r1
     702:	a1 04       	cpc	r10, r1
     704:	b1 04       	cpc	r11, r1
     706:	29 f4       	brne	.+10     	; 0x712 <find_volume+0x12e>
     708:	3e 96       	adiw	r30, 0x0e	; 14
     70a:	80 80       	ld	r8, Z
     70c:	91 80       	ldd	r9, Z+1	; 0x01
     70e:	a2 80       	ldd	r10, Z+2	; 0x02
     710:	b3 80       	ldd	r11, Z+3	; 0x03
	fs->fsize = fasize;
     712:	d8 01       	movw	r26, r16
     714:	56 96       	adiw	r26, 0x16	; 22
     716:	8d 92       	st	X+, r8
     718:	9d 92       	st	X+, r9
     71a:	ad 92       	st	X+, r10
     71c:	bc 92       	st	X, r11
     71e:	59 97       	sbiw	r26, 0x19	; 25
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
     720:	de 96       	adiw	r26, 0x3e	; 62
     722:	ac 91       	ld	r26, X
     724:	f8 01       	movw	r30, r16
     726:	a3 83       	std	Z+3, r26	; 0x03
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	8a 0f       	add	r24, r26
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	08 f0       	brcs	.+2      	; 0x732 <find_volume+0x14e>
     730:	3e c1       	rjmp	.+636    	; 0x9ae <find_volume+0x3ca>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
     732:	f3 ad       	ldd	r31, Z+59	; 0x3b
     734:	f9 8b       	std	Y+17, r31	; 0x11
     736:	2f 2f       	mov	r18, r31
     738:	f8 01       	movw	r30, r16
     73a:	22 83       	std	Z+2, r18	; 0x02
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
     73c:	22 23       	and	r18, r18
     73e:	09 f4       	brne	.+2      	; 0x742 <find_volume+0x15e>
     740:	36 c1       	rjmp	.+620    	; 0x9ae <find_volume+0x3ca>
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	c9 01       	movw	r24, r18
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	82 23       	and	r24, r18
     74a:	93 23       	and	r25, r19
     74c:	89 2b       	or	r24, r25
     74e:	09 f0       	breq	.+2      	; 0x752 <find_volume+0x16e>
     750:	2e c1       	rjmp	.+604    	; 0x9ae <find_volume+0x3ca>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
     752:	f8 01       	movw	r30, r16
     754:	ff 96       	adiw	r30, 0x3f	; 63
     756:	20 80       	ld	r2, Z
     758:	31 80       	ldd	r3, Z+1	; 0x01
     75a:	f8 01       	movw	r30, r16
     75c:	31 86       	std	Z+9, r3	; 0x09
     75e:	20 86       	std	Z+8, r2	; 0x08
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
     760:	c1 01       	movw	r24, r2
     762:	8f 70       	andi	r24, 0x0F	; 15
     764:	99 27       	eor	r25, r25
     766:	89 2b       	or	r24, r25
     768:	09 f0       	breq	.+2      	; 0x76c <find_volume+0x188>
     76a:	21 c1       	rjmp	.+578    	; 0x9ae <find_volume+0x3ca>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
     76c:	ef 5b       	subi	r30, 0xBF	; 191
     76e:	ff 4f       	sbci	r31, 0xFF	; 255
     770:	40 80       	ld	r4, Z
     772:	51 80       	ldd	r5, Z+1	; 0x01
     774:	71 2c       	mov	r7, r1
     776:	61 2c       	mov	r6, r1
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
     778:	41 14       	cp	r4, r1
     77a:	51 04       	cpc	r5, r1
     77c:	61 04       	cpc	r6, r1
     77e:	71 04       	cpc	r7, r1
     780:	29 f4       	brne	.+10     	; 0x78c <find_volume+0x1a8>
     782:	3d 96       	adiw	r30, 0x0d	; 13
     784:	40 80       	ld	r4, Z
     786:	51 80       	ldd	r5, Z+1	; 0x01
     788:	62 80       	ldd	r6, Z+2	; 0x02
     78a:	73 80       	ldd	r7, Z+3	; 0x03
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
     78c:	f8 01       	movw	r30, r16
     78e:	04 ac       	ldd	r0, Z+60	; 0x3c
     790:	f5 ad       	ldd	r31, Z+61	; 0x3d
     792:	e0 2d       	mov	r30, r0
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
     794:	30 97       	sbiw	r30, 0x00	; 0
     796:	09 f4       	brne	.+2      	; 0x79a <find_volume+0x1b6>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
     798:	0a c1       	rjmp	.+532    	; 0x9ae <find_volume+0x3ca>
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	a5 01       	movw	r20, r10
     79e:	94 01       	movw	r18, r8
     7a0:	94 d7       	rcall	.+3880   	; 0x16ca <__muluhisi3>
     7a2:	6d 8f       	std	Y+29, r22	; 0x1d
     7a4:	7e 8f       	std	Y+30, r23	; 0x1e
     7a6:	8f 8f       	std	Y+31, r24	; 0x1f
     7a8:	98 a3       	std	Y+32, r25	; 0x20
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
     7aa:	9f 01       	movw	r18, r30
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	29 8f       	std	Y+25, r18	; 0x19
     7b2:	3a 8f       	std	Y+26, r19	; 0x1a
     7b4:	4b 8f       	std	Y+27, r20	; 0x1b
     7b6:	5c 8f       	std	Y+28, r21	; 0x1c
     7b8:	c1 01       	movw	r24, r2
     7ba:	92 95       	swap	r25
     7bc:	82 95       	swap	r24
     7be:	8f 70       	andi	r24, 0x0F	; 15
     7c0:	89 27       	eor	r24, r25
     7c2:	9f 70       	andi	r25, 0x0F	; 15
     7c4:	89 27       	eor	r24, r25
     7c6:	28 0f       	add	r18, r24
     7c8:	39 1f       	adc	r19, r25
     7ca:	41 1d       	adc	r20, r1
     7cc:	51 1d       	adc	r21, r1
     7ce:	da 01       	movw	r26, r20
     7d0:	c9 01       	movw	r24, r18
     7d2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     7d4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     7d6:	4f 8d       	ldd	r20, Y+31	; 0x1f
     7d8:	58 a1       	ldd	r21, Y+32	; 0x20
     7da:	28 0f       	add	r18, r24
     7dc:	39 1f       	adc	r19, r25
     7de:	4a 1f       	adc	r20, r26
     7e0:	5b 1f       	adc	r21, r27
     7e2:	2d 8b       	std	Y+21, r18	; 0x15
     7e4:	3e 8b       	std	Y+22, r19	; 0x16
     7e6:	4f 8b       	std	Y+23, r20	; 0x17
     7e8:	58 8f       	std	Y+24, r21	; 0x18
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     7ea:	42 16       	cp	r4, r18
     7ec:	53 06       	cpc	r5, r19
     7ee:	64 06       	cpc	r6, r20
     7f0:	75 06       	cpc	r7, r21
     7f2:	08 f4       	brcc	.+2      	; 0x7f6 <find_volume+0x212>
     7f4:	dc c0       	rjmp	.+440    	; 0x9ae <find_volume+0x3ca>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
     7f6:	42 1a       	sub	r4, r18
     7f8:	53 0a       	sbc	r5, r19
     7fa:	64 0a       	sbc	r6, r20
     7fc:	75 0a       	sbc	r7, r21
     7fe:	99 89       	ldd	r25, Y+17	; 0x11
     800:	89 2f       	mov	r24, r25
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	a0 e0       	ldi	r26, 0x00	; 0
     808:	89 8b       	std	Y+17, r24	; 0x11
     80a:	9a 8b       	std	Y+18, r25	; 0x12
     80c:	ab 8b       	std	Y+19, r26	; 0x13
     80e:	bc 8b       	std	Y+20, r27	; 0x14
     810:	c3 01       	movw	r24, r6
     812:	b2 01       	movw	r22, r4
     814:	29 89       	ldd	r18, Y+17	; 0x11
     816:	3a 89       	ldd	r19, Y+18	; 0x12
     818:	4b 89       	ldd	r20, Y+19	; 0x13
     81a:	5c 89       	ldd	r21, Y+20	; 0x14
     81c:	34 d7       	rcall	.+3688   	; 0x1686 <__udivmodsi4>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     81e:	89 89       	ldd	r24, Y+17	; 0x11
     820:	9a 89       	ldd	r25, Y+18	; 0x12
     822:	ab 89       	ldd	r26, Y+19	; 0x13
     824:	bc 89       	ldd	r27, Y+20	; 0x14
     826:	48 16       	cp	r4, r24
     828:	59 06       	cpc	r5, r25
     82a:	6a 06       	cpc	r6, r26
     82c:	7b 06       	cpc	r7, r27
     82e:	08 f4       	brcc	.+2      	; 0x832 <find_volume+0x24e>
     830:	be c0       	rjmp	.+380    	; 0x9ae <find_volume+0x3ca>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     832:	8d 89       	ldd	r24, Y+21	; 0x15
     834:	9e 89       	ldd	r25, Y+22	; 0x16
     836:	af 89       	ldd	r26, Y+23	; 0x17
     838:	b8 8d       	ldd	r27, Y+24	; 0x18
     83a:	8c 0d       	add	r24, r12
     83c:	9d 1d       	adc	r25, r13
     83e:	ae 1d       	adc	r26, r14
     840:	bf 1d       	adc	r27, r15
     842:	8d 8b       	std	Y+21, r24	; 0x15
     844:	9e 8b       	std	Y+22, r25	; 0x16
     846:	af 8b       	std	Y+23, r26	; 0x17
     848:	b8 8f       	std	Y+24, r27	; 0x18
     84a:	89 8d       	ldd	r24, Y+25	; 0x19
     84c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     84e:	ab 8d       	ldd	r26, Y+27	; 0x1b
     850:	bc 8d       	ldd	r27, Y+28	; 0x1c
     852:	8c 0d       	add	r24, r12
     854:	9d 1d       	adc	r25, r13
     856:	ae 1d       	adc	r26, r14
     858:	bf 1d       	adc	r27, r15
     85a:	29 01       	movw	r4, r18
     85c:	3a 01       	movw	r6, r20
     85e:	e2 e0       	ldi	r30, 0x02	; 2
     860:	4e 0e       	add	r4, r30
     862:	51 1c       	adc	r5, r1
     864:	61 1c       	adc	r6, r1
     866:	71 1c       	adc	r7, r1
     868:	26 3f       	cpi	r18, 0xF6	; 246
     86a:	ff e0       	ldi	r31, 0x0F	; 15
     86c:	3f 07       	cpc	r19, r31
     86e:	41 05       	cpc	r20, r1
     870:	51 05       	cpc	r21, r1
     872:	08 f4       	brcc	.+2      	; 0x876 <find_volume+0x292>
     874:	fd c0       	rjmp	.+506    	; 0xa70 <find_volume+0x48c>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     876:	26 3f       	cpi	r18, 0xF6	; 246
     878:	3f 4f       	sbci	r19, 0xFF	; 255
     87a:	41 05       	cpc	r20, r1
     87c:	51 05       	cpc	r21, r1
     87e:	08 f4       	brcc	.+2      	; 0x882 <find_volume+0x29e>
     880:	56 c1       	rjmp	.+684    	; 0xb2e <__stack+0x2f>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     882:	f8 01       	movw	r30, r16
     884:	42 8a       	std	Z+18, r4	; 0x12
     886:	53 8a       	std	Z+19, r5	; 0x13
     888:	64 8a       	std	Z+20, r6	; 0x14
     88a:	75 8a       	std	Z+21, r7	; 0x15
	fs->volbase = bsect;								/* Volume start sector */
     88c:	c2 8e       	std	Z+26, r12	; 0x1a
     88e:	d3 8e       	std	Z+27, r13	; 0x1b
     890:	e4 8e       	std	Z+28, r14	; 0x1c
     892:	f5 8e       	std	Z+29, r15	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     894:	86 8f       	std	Z+30, r24	; 0x1e
     896:	97 8f       	std	Z+31, r25	; 0x1f
     898:	a0 a3       	std	Z+32, r26	; 0x20
     89a:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
     89c:	2d 89       	ldd	r18, Y+21	; 0x15
     89e:	3e 89       	ldd	r19, Y+22	; 0x16
     8a0:	4f 89       	ldd	r20, Y+23	; 0x17
     8a2:	58 8d       	ldd	r21, Y+24	; 0x18
     8a4:	26 a3       	std	Z+38, r18	; 0x26
     8a6:	37 a3       	std	Z+39, r19	; 0x27
     8a8:	40 a7       	std	Z+40, r20	; 0x28
     8aa:	51 a7       	std	Z+41, r21	; 0x29
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     8ac:	23 28       	or	r2, r3
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <find_volume+0x2ce>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <find_volume+0x3ca>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
     8b2:	f8 01       	movw	r30, r16
     8b4:	e6 5a       	subi	r30, 0xA6	; 166
     8b6:	ff 4f       	sbci	r31, 0xFF	; 255
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	a2 81       	ldd	r26, Z+2	; 0x02
     8be:	b3 81       	ldd	r27, Z+3	; 0x03
     8c0:	f8 01       	movw	r30, r16
     8c2:	82 a3       	std	Z+34, r24	; 0x22
     8c4:	93 a3       	std	Z+35, r25	; 0x23
     8c6:	a4 a3       	std	Z+36, r26	; 0x24
     8c8:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
     8ca:	44 0c       	add	r4, r4
     8cc:	55 1c       	adc	r5, r5
     8ce:	66 1c       	adc	r6, r6
     8d0:	77 1c       	adc	r7, r7
     8d2:	44 0c       	add	r4, r4
     8d4:	55 1c       	adc	r5, r5
     8d6:	66 1c       	adc	r6, r6
     8d8:	77 1c       	adc	r7, r7
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
     8da:	ff ef       	ldi	r31, 0xFF	; 255
     8dc:	4f 0e       	add	r4, r31
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	5f 1e       	adc	r5, r31
     8e2:	61 1c       	adc	r6, r1
     8e4:	71 1c       	adc	r7, r1
     8e6:	a9 e0       	ldi	r26, 0x09	; 9
     8e8:	76 94       	lsr	r7
     8ea:	67 94       	ror	r6
     8ec:	57 94       	ror	r5
     8ee:	47 94       	ror	r4
     8f0:	aa 95       	dec	r26
     8f2:	d1 f7       	brne	.-12     	; 0x8e8 <find_volume+0x304>
     8f4:	84 14       	cp	r8, r4
     8f6:	95 04       	cpc	r9, r5
     8f8:	a6 04       	cpc	r10, r6
     8fa:	b7 04       	cpc	r11, r7
     8fc:	08 f4       	brcc	.+2      	; 0x900 <find_volume+0x31c>
     8fe:	57 c0       	rjmp	.+174    	; 0x9ae <find_volume+0x3ca>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	9f ef       	ldi	r25, 0xFF	; 255
     904:	dc 01       	movw	r26, r24
     906:	f8 01       	movw	r30, r16
     908:	86 87       	std	Z+14, r24	; 0x0e
     90a:	97 87       	std	Z+15, r25	; 0x0f
     90c:	a0 8b       	std	Z+16, r26	; 0x10
     90e:	b1 8b       	std	Z+17, r27	; 0x11
     910:	82 87       	std	Z+10, r24	; 0x0a
     912:	93 87       	std	Z+11, r25	; 0x0b
     914:	a4 87       	std	Z+12, r26	; 0x0c
     916:	b5 87       	std	Z+13, r27	; 0x0d
	fs->fsi_flag = 0x80;
     918:	80 e8       	ldi	r24, 0x80	; 128
     91a:	85 83       	std	Z+5, r24	; 0x05
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
     91c:	e2 5a       	subi	r30, 0xA2	; 162
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	80 81       	ld	r24, Z
     922:	91 81       	ldd	r25, Z+1	; 0x01
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	09 f4       	brne	.+2      	; 0x92a <find_volume+0x346>
     928:	52 c0       	rjmp	.+164    	; 0x9ce <find_volume+0x3ea>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     92a:	23 e0       	ldi	r18, 0x03	; 3
	fs->fs_type = fmt;	/* FAT sub-type */
     92c:	d8 01       	movw	r26, r16
     92e:	2c 93       	st	X, r18
	fs->id = ++Fsid;	/* File system mount ID */
     930:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <Fsid>
     934:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <Fsid+0x1>
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <Fsid+0x1>
     93e:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <Fsid>
     942:	17 96       	adiw	r26, 0x07	; 7
     944:	9c 93       	st	X, r25
     946:	8e 93       	st	-X, r24
     948:	16 97       	sbiw	r26, 0x06	; 6
	return FR_OK;
     94a:	71 2c       	mov	r7, r1
     94c:	90 ce       	rjmp	.-736    	; 0x66e <find_volume+0x8a>
     94e:	f8 01       	movw	r30, r16
     950:	e0 51       	subi	r30, 0x10	; 16
     952:	fe 4f       	sbci	r31, 0xFE	; 254
     954:	9e 01       	movw	r18, r28
     956:	2f 5f       	subi	r18, 0xFF	; 255
     958:	3f 4f       	sbci	r19, 0xFF	; 255
     95a:	59 01       	movw	r10, r18
     95c:	4e 01       	movw	r8, r28
     95e:	31 e1       	ldi	r19, 0x11	; 17
     960:	83 0e       	add	r8, r19
     962:	91 1c       	adc	r9, r1
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     964:	d5 01       	movw	r26, r10
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     966:	80 81       	ld	r24, Z
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	ba 01       	movw	r22, r20
     96e:	88 23       	and	r24, r24
     970:	21 f0       	breq	.+8      	; 0x97a <find_volume+0x396>
     972:	44 81       	ldd	r20, Z+4	; 0x04
     974:	55 81       	ldd	r21, Z+5	; 0x05
     976:	66 81       	ldd	r22, Z+6	; 0x06
     978:	77 81       	ldd	r23, Z+7	; 0x07
     97a:	4d 93       	st	X+, r20
     97c:	5d 93       	st	X+, r21
     97e:	6d 93       	st	X+, r22
     980:	7d 93       	st	X+, r23
     982:	70 96       	adiw	r30, 0x10	; 16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
     984:	a8 15       	cp	r26, r8
     986:	b9 05       	cpc	r27, r9
     988:	71 f7       	brne	.-36     	; 0x966 <find_volume+0x382>
			bsect = br[i];
     98a:	d5 01       	movw	r26, r10
     98c:	cd 90       	ld	r12, X+
     98e:	dd 90       	ld	r13, X+
     990:	ed 90       	ld	r14, X+
     992:	fd 90       	ld	r15, X+
     994:	5d 01       	movw	r10, r26
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	c1 14       	cp	r12, r1
     99a:	d1 04       	cpc	r13, r1
     99c:	e1 04       	cpc	r14, r1
     99e:	f1 04       	cpc	r15, r1
     9a0:	61 f4       	brne	.+24     	; 0x9ba <find_volume+0x3d6>
		} while (!LD2PT(vol) && fmt && ++i < 4);
     9a2:	a8 14       	cp	r10, r8
     9a4:	b9 04       	cpc	r11, r9
     9a6:	89 f7       	brne	.-30     	; 0x98a <find_volume+0x3a6>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     9a8:	83 30       	cpi	r24, 0x03	; 3
     9aa:	09 f4       	brne	.+2      	; 0x9ae <find_volume+0x3ca>
     9ac:	60 ce       	rjmp	.-832    	; 0x66e <find_volume+0x8a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     9ae:	1d e0       	ldi	r17, 0x0D	; 13
     9b0:	71 2e       	mov	r7, r17
     9b2:	5d ce       	rjmp	.-838    	; 0x66e <find_volume+0x8a>
				return FR_WRITE_PROTECTED;
     9b4:	0a e0       	ldi	r16, 0x0A	; 10
     9b6:	70 2e       	mov	r7, r16
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     9b8:	5a ce       	rjmp	.-844    	; 0x66e <find_volume+0x8a>
     9ba:	b7 01       	movw	r22, r14
     9bc:	a6 01       	movw	r20, r12
     9be:	c8 01       	movw	r24, r16
     9c0:	cb dd       	rcall	.-1130   	; 0x558 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
     9c2:	81 11       	cpse	r24, r1
     9c4:	ee cf       	rjmp	.-36     	; 0x9a2 <find_volume+0x3be>
     9c6:	8d ce       	rjmp	.-742    	; 0x6e2 <find_volume+0xfe>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     9c8:	7c e0       	ldi	r23, 0x0C	; 12
     9ca:	77 2e       	mov	r7, r23
     9cc:	50 ce       	rjmp	.-864    	; 0x66e <find_volume+0x8a>
		&& move_window(fs, bsect + 1) == FR_OK)
     9ce:	b7 01       	movw	r22, r14
     9d0:	a6 01       	movw	r20, r12
     9d2:	4f 5f       	subi	r20, 0xFF	; 255
     9d4:	5f 4f       	sbci	r21, 0xFF	; 255
     9d6:	6f 4f       	sbci	r22, 0xFF	; 255
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
	if (sector != fs->winsect) {	/* Window offset changed? */
     9da:	f8 01       	movw	r30, r16
     9dc:	82 a5       	ldd	r24, Z+42	; 0x2a
     9de:	93 a5       	ldd	r25, Z+43	; 0x2b
     9e0:	a4 a5       	ldd	r26, Z+44	; 0x2c
     9e2:	b5 a5       	ldd	r27, Z+45	; 0x2d
     9e4:	48 17       	cp	r20, r24
     9e6:	59 07       	cpc	r21, r25
     9e8:	6a 07       	cpc	r22, r26
     9ea:	7b 07       	cpc	r23, r27
     9ec:	21 f0       	breq	.+8      	; 0x9f6 <find_volume+0x412>
     9ee:	c8 01       	movw	r24, r16
     9f0:	82 dd       	rcall	.-1276   	; 0x4f6 <move_window.part.3>
		&& move_window(fs, bsect + 1) == FR_OK)
     9f2:	81 11       	cpse	r24, r1
     9f4:	9a cf       	rjmp	.-204    	; 0x92a <find_volume+0x346>
		fs->fsi_flag = 0;
     9f6:	d8 01       	movw	r26, r16
     9f8:	15 96       	adiw	r26, 0x05	; 5
     9fa:	1c 92       	st	X, r1
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
     9fc:	f8 01       	movw	r30, r16
     9fe:	e4 5d       	subi	r30, 0xD4	; 212
     a00:	fd 4f       	sbci	r31, 0xFD	; 253
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	85 35       	cpi	r24, 0x55	; 85
     a08:	9a 4a       	sbci	r25, 0xAA	; 170
     a0a:	09 f0       	breq	.+2      	; 0xa0e <find_volume+0x42a>
     a0c:	8e cf       	rjmp	.-228    	; 0x92a <find_volume+0x346>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
     a0e:	f8 01       	movw	r30, r16
     a10:	86 a5       	ldd	r24, Z+46	; 0x2e
     a12:	97 a5       	ldd	r25, Z+47	; 0x2f
     a14:	a0 a9       	ldd	r26, Z+48	; 0x30
     a16:	b1 a9       	ldd	r27, Z+49	; 0x31
     a18:	82 35       	cpi	r24, 0x52	; 82
     a1a:	92 45       	sbci	r25, 0x52	; 82
     a1c:	a1 46       	sbci	r26, 0x61	; 97
     a1e:	b1 44       	sbci	r27, 0x41	; 65
     a20:	09 f0       	breq	.+2      	; 0xa24 <find_volume+0x440>
     a22:	83 cf       	rjmp	.-250    	; 0x92a <find_volume+0x346>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
     a24:	f8 01       	movw	r30, r16
     a26:	ee 5e       	subi	r30, 0xEE	; 238
     a28:	fd 4f       	sbci	r31, 0xFD	; 253
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	a2 81       	ldd	r26, Z+2	; 0x02
     a30:	b3 81       	ldd	r27, Z+3	; 0x03
     a32:	82 37       	cpi	r24, 0x72	; 114
     a34:	92 47       	sbci	r25, 0x72	; 114
     a36:	a1 44       	sbci	r26, 0x41	; 65
     a38:	b1 46       	sbci	r27, 0x61	; 97
     a3a:	09 f0       	breq	.+2      	; 0xa3e <find_volume+0x45a>
     a3c:	76 cf       	rjmp	.-276    	; 0x92a <find_volume+0x346>
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
     a3e:	34 96       	adiw	r30, 0x04	; 4
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	a2 81       	ldd	r26, Z+2	; 0x02
     a46:	b3 81       	ldd	r27, Z+3	; 0x03
     a48:	f8 01       	movw	r30, r16
     a4a:	86 87       	std	Z+14, r24	; 0x0e
     a4c:	97 87       	std	Z+15, r25	; 0x0f
     a4e:	a0 8b       	std	Z+16, r26	; 0x10
     a50:	b1 8b       	std	Z+17, r27	; 0x11
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
     a52:	e6 5e       	subi	r30, 0xE6	; 230
     a54:	fd 4f       	sbci	r31, 0xFD	; 253
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	a2 81       	ldd	r26, Z+2	; 0x02
     a5c:	b3 81       	ldd	r27, Z+3	; 0x03
     a5e:	f8 01       	movw	r30, r16
     a60:	82 87       	std	Z+10, r24	; 0x0a
     a62:	93 87       	std	Z+11, r25	; 0x0b
     a64:	a4 87       	std	Z+12, r26	; 0x0c
     a66:	b5 87       	std	Z+13, r27	; 0x0d
     a68:	60 cf       	rjmp	.-320    	; 0x92a <find_volume+0x346>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     a6a:	77 24       	eor	r7, r7
     a6c:	73 94       	inc	r7
     a6e:	ff cd       	rjmp	.-1026   	; 0x66e <find_volume+0x8a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     a70:	f8 01       	movw	r30, r16
     a72:	42 8a       	std	Z+18, r4	; 0x12
     a74:	53 8a       	std	Z+19, r5	; 0x13
     a76:	64 8a       	std	Z+20, r6	; 0x14
     a78:	75 8a       	std	Z+21, r7	; 0x15
	fs->volbase = bsect;								/* Volume start sector */
     a7a:	c2 8e       	std	Z+26, r12	; 0x1a
     a7c:	d3 8e       	std	Z+27, r13	; 0x1b
     a7e:	e4 8e       	std	Z+28, r14	; 0x1c
     a80:	f5 8e       	std	Z+29, r15	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     a82:	86 8f       	std	Z+30, r24	; 0x1e
     a84:	97 8f       	std	Z+31, r25	; 0x1f
     a86:	a0 a3       	std	Z+32, r26	; 0x20
     a88:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
     a8a:	2d 89       	ldd	r18, Y+21	; 0x15
     a8c:	3e 89       	ldd	r19, Y+22	; 0x16
     a8e:	4f 89       	ldd	r20, Y+23	; 0x17
     a90:	58 8d       	ldd	r21, Y+24	; 0x18
     a92:	26 a3       	std	Z+38, r18	; 0x26
     a94:	37 a3       	std	Z+39, r19	; 0x27
     a96:	40 a7       	std	Z+40, r20	; 0x28
     a98:	51 a7       	std	Z+41, r21	; 0x29
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     a9a:	23 28       	or	r2, r3
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <find_volume+0x4bc>
     a9e:	87 cf       	rjmp	.-242    	; 0x9ae <find_volume+0x3ca>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     aa0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     aa2:	3e 8d       	ldd	r19, Y+30	; 0x1e
     aa4:	4f 8d       	ldd	r20, Y+31	; 0x1f
     aa6:	58 a1       	ldd	r21, Y+32	; 0x20
     aa8:	82 0f       	add	r24, r18
     aaa:	93 1f       	adc	r25, r19
     aac:	a4 1f       	adc	r26, r20
     aae:	b5 1f       	adc	r27, r21
     ab0:	f8 01       	movw	r30, r16
     ab2:	82 a3       	std	Z+34, r24	; 0x22
     ab4:	93 a3       	std	Z+35, r25	; 0x23
     ab6:	a4 a3       	std	Z+36, r26	; 0x24
     ab8:	b5 a3       	std	Z+37, r27	; 0x25
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     aba:	d3 01       	movw	r26, r6
     abc:	c2 01       	movw	r24, r4
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	aa 1f       	adc	r26, r26
     ac4:	bb 1f       	adc	r27, r27
     ac6:	84 0d       	add	r24, r4
     ac8:	95 1d       	adc	r25, r5
     aca:	a6 1d       	adc	r26, r6
     acc:	b7 1d       	adc	r27, r7
     ace:	b6 95       	lsr	r27
     ad0:	a7 95       	ror	r26
     ad2:	97 95       	ror	r25
     ad4:	87 95       	ror	r24
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	4f 22       	and	r4, r31
     ada:	55 24       	eor	r5, r5
     adc:	66 24       	eor	r6, r6
     ade:	77 24       	eor	r7, r7
     ae0:	84 0d       	add	r24, r4
     ae2:	95 1d       	adc	r25, r5
     ae4:	a6 1d       	adc	r26, r6
     ae6:	b7 1d       	adc	r27, r7
	fmt = FS_FAT12;
     ae8:	21 e0       	ldi	r18, 0x01	; 1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
     aea:	81 50       	subi	r24, 0x01	; 1
     aec:	9e 4f       	sbci	r25, 0xFE	; 254
     aee:	af 4f       	sbci	r26, 0xFF	; 255
     af0:	bf 4f       	sbci	r27, 0xFF	; 255
     af2:	2c 01       	movw	r4, r24
     af4:	3d 01       	movw	r6, r26
     af6:	59 e0       	ldi	r21, 0x09	; 9
     af8:	76 94       	lsr	r7
     afa:	67 94       	ror	r6
     afc:	57 94       	ror	r5
     afe:	47 94       	ror	r4
     b00:	5a 95       	dec	r21
     b02:	d1 f7       	brne	.-12     	; 0xaf8 <find_volume+0x514>
     b04:	84 14       	cp	r8, r4
     b06:	95 04       	cpc	r9, r5
     b08:	a6 04       	cpc	r10, r6
     b0a:	b7 04       	cpc	r11, r7
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <__stack+0x11>
     b0e:	4f cf       	rjmp	.-354    	; 0x9ae <find_volume+0x3ca>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
     b10:	4f ef       	ldi	r20, 0xFF	; 255
     b12:	5f ef       	ldi	r21, 0xFF	; 255
     b14:	ba 01       	movw	r22, r20
     b16:	f8 01       	movw	r30, r16
     b18:	46 87       	std	Z+14, r20	; 0x0e
     b1a:	57 87       	std	Z+15, r21	; 0x0f
     b1c:	60 8b       	std	Z+16, r22	; 0x10
     b1e:	71 8b       	std	Z+17, r23	; 0x11
     b20:	42 87       	std	Z+10, r20	; 0x0a
     b22:	53 87       	std	Z+11, r21	; 0x0b
     b24:	64 87       	std	Z+12, r22	; 0x0c
     b26:	75 87       	std	Z+13, r23	; 0x0d
	fs->fsi_flag = 0x80;
     b28:	90 e8       	ldi	r25, 0x80	; 128
     b2a:	95 83       	std	Z+5, r25	; 0x05
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo == 1 */
     b2c:	ff ce       	rjmp	.-514    	; 0x92c <find_volume+0x348>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     b2e:	f8 01       	movw	r30, r16
     b30:	42 8a       	std	Z+18, r4	; 0x12
     b32:	53 8a       	std	Z+19, r5	; 0x13
     b34:	64 8a       	std	Z+20, r6	; 0x14
     b36:	75 8a       	std	Z+21, r7	; 0x15
	fs->volbase = bsect;								/* Volume start sector */
     b38:	c2 8e       	std	Z+26, r12	; 0x1a
     b3a:	d3 8e       	std	Z+27, r13	; 0x1b
     b3c:	e4 8e       	std	Z+28, r14	; 0x1c
     b3e:	f5 8e       	std	Z+29, r15	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     b40:	86 8f       	std	Z+30, r24	; 0x1e
     b42:	97 8f       	std	Z+31, r25	; 0x1f
     b44:	a0 a3       	std	Z+32, r26	; 0x20
     b46:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
     b48:	2d 89       	ldd	r18, Y+21	; 0x15
     b4a:	3e 89       	ldd	r19, Y+22	; 0x16
     b4c:	4f 89       	ldd	r20, Y+23	; 0x17
     b4e:	58 8d       	ldd	r21, Y+24	; 0x18
     b50:	26 a3       	std	Z+38, r18	; 0x26
     b52:	37 a3       	std	Z+39, r19	; 0x27
     b54:	40 a7       	std	Z+40, r20	; 0x28
     b56:	51 a7       	std	Z+41, r21	; 0x29
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     b58:	23 28       	or	r2, r3
     b5a:	09 f4       	brne	.+2      	; 0xb5e <__stack+0x5f>
     b5c:	28 cf       	rjmp	.-432    	; 0x9ae <find_volume+0x3ca>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     b5e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     b60:	3e 8d       	ldd	r19, Y+30	; 0x1e
     b62:	4f 8d       	ldd	r20, Y+31	; 0x1f
     b64:	58 a1       	ldd	r21, Y+32	; 0x20
     b66:	82 0f       	add	r24, r18
     b68:	93 1f       	adc	r25, r19
     b6a:	a4 1f       	adc	r26, r20
     b6c:	b5 1f       	adc	r27, r21
     b6e:	f8 01       	movw	r30, r16
     b70:	82 a3       	std	Z+34, r24	; 0x22
     b72:	93 a3       	std	Z+35, r25	; 0x23
     b74:	a4 a3       	std	Z+36, r26	; 0x24
     b76:	b5 a3       	std	Z+37, r27	; 0x25
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     b78:	d3 01       	movw	r26, r6
     b7a:	c2 01       	movw	r24, r4
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	aa 1f       	adc	r26, r26
     b82:	bb 1f       	adc	r27, r27
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     b84:	22 e0       	ldi	r18, 0x02	; 2
     b86:	b1 cf       	rjmp	.-158    	; 0xaea <find_volume+0x506>

00000b88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <f_mount+0x8>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <f_mount+0xa>
     b92:	00 d0       	rcall	.+0      	; 0xb94 <f_mount+0xc>
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	9c 83       	std	Y+4, r25	; 0x04
     b9a:	8b 83       	std	Y+3, r24	; 0x03
     b9c:	7e 83       	std	Y+6, r23	; 0x06
     b9e:	6d 83       	std	Y+5, r22	; 0x05
     ba0:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
     ba2:	7a 83       	std	Y+2, r23	; 0x02
     ba4:	69 83       	std	Y+1, r22	; 0x01


	vol = get_ldnumber(&rp);
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	0f dc       	rcall	.-2018   	; 0x3ca <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
     bac:	97 fd       	sbrc	r25, 7
     bae:	2a c0       	rjmp	.+84     	; 0xc04 <f_mount+0x7c>
	cfs = FatFs[vol];					/* Pointer to fs object */
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	fc 01       	movw	r30, r24
     bb6:	e1 57       	subi	r30, 0x71	; 113
     bb8:	fd 4f       	sbci	r31, 0xFD	; 253
     bba:	01 90       	ld	r0, Z+
     bbc:	f0 81       	ld	r31, Z
     bbe:	e0 2d       	mov	r30, r0

	if (cfs) {
     bc0:	30 97       	sbiw	r30, 0x00	; 0
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
     bc4:	10 82       	st	Z, r1
	}

	if (fs) {
     bc6:	eb 81       	ldd	r30, Y+3	; 0x03
     bc8:	fc 81       	ldd	r31, Y+4	; 0x04
     bca:	30 97       	sbiw	r30, 0x00	; 0
     bcc:	e9 f0       	breq	.+58     	; 0xc08 <f_mount+0x80>
		fs->fs_type = 0;				/* Clear new fs object */
     bce:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
     bd0:	81 57       	subi	r24, 0x71	; 113
     bd2:	9d 4f       	sbci	r25, 0xFD	; 253
     bd4:	dc 01       	movw	r26, r24
     bd6:	ed 93       	st	X+, r30
     bd8:	fc 93       	st	X, r31

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
     bda:	11 30       	cpi	r17, 0x01	; 1
     bdc:	59 f0       	breq	.+22     	; 0xbf4 <f_mount+0x6c>
     bde:	80 e0       	ldi	r24, 0x00	; 0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
     be0:	26 96       	adiw	r28, 0x06	; 6
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	08 95       	ret
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	be 01       	movw	r22, r28
     bf8:	6b 5f       	subi	r22, 0xFB	; 251
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	ce 01       	movw	r24, r28
     bfe:	03 96       	adiw	r24, 0x03	; 3
     c00:	f1 dc       	rcall	.-1566   	; 0x5e4 <find_volume>
	LEAVE_FF(fs, res);
     c02:	ee cf       	rjmp	.-36     	; 0xbe0 <f_mount+0x58>
	if (vol < 0) return FR_INVALID_DRIVE;
     c04:	8b e0       	ldi	r24, 0x0B	; 11
     c06:	ec cf       	rjmp	.-40     	; 0xbe0 <f_mount+0x58>
	FatFs[vol] = fs;					/* Register new fs object */
     c08:	81 57       	subi	r24, 0x71	; 113
     c0a:	9d 4f       	sbci	r25, 0xFD	; 253
     c0c:	fc 01       	movw	r30, r24
     c0e:	11 82       	std	Z+1, r1	; 0x01
     c10:	10 82       	st	Z, r1
     c12:	e5 cf       	rjmp	.-54     	; 0xbde <f_mount+0x56>

00000c14 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
     c14:	2f 98       	cbi	0x05, 7	; 5
	SPDR = dat;
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     c1a:	0d b4       	in	r0, 0x2d	; 45
     c1c:	07 fe       	sbrs	r0, 7
     c1e:	fd cf       	rjmp	.-6      	; 0xc1a <select+0x6>
	return SPDR;
     c20:	8e b5       	in	r24, 0x2e	; 46
	Timer2 = wt / 10;
     c22:	82 e3       	ldi	r24, 0x32	; 50
     c24:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <Timer2>
	SPDR = dat;
     c28:	9f ef       	ldi	r25, 0xFF	; 255
     c2a:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     c2c:	0d b4       	in	r0, 0x2d	; 45
     c2e:	07 fe       	sbrs	r0, 7
     c30:	fd cf       	rjmp	.-6      	; 0xc2c <select+0x18>
	return SPDR;
     c32:	8e b5       	in	r24, 0x2e	; 46
	while (d != 0xFF && Timer2);
     c34:	8f 3f       	cpi	r24, 0xFF	; 255
     c36:	71 f0       	breq	.+28     	; 0xc54 <select+0x40>
     c38:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <Timer2>
     c3c:	81 11       	cpse	r24, r1
     c3e:	f5 cf       	rjmp	.-22     	; 0xc2a <select+0x16>
	CS_HIGH();		/* Set CS# high */
     c40:	2f 9a       	sbi	0x05, 7	; 5
	SPDR = dat;
     c42:	8f ef       	ldi	r24, 0xFF	; 255
     c44:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     c46:	0d b4       	in	r0, 0x2d	; 45
     c48:	07 fe       	sbrs	r0, 7
     c4a:	fd cf       	rjmp	.-6      	; 0xc46 <select+0x32>
	return SPDR;
     c4c:	8e b5       	in	r24, 0x2e	; 46
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	08 95       	ret
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
     c58:	08 95       	ret

00000c5a <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	cf 93       	push	r28
     c64:	c8 2f       	mov	r28, r24
     c66:	6a 01       	movw	r12, r20
     c68:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     c6a:	87 fd       	sbrc	r24, 7
     c6c:	5a c0       	rjmp	.+180    	; 0xd22 <send_cmd+0xc8>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     c6e:	cc 30       	cpi	r28, 0x0C	; 12
     c70:	59 f0       	breq	.+22     	; 0xc88 <send_cmd+0x2e>
	CS_HIGH();		/* Set CS# high */
     c72:	2f 9a       	sbi	0x05, 7	; 5
	SPDR = dat;
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     c78:	0d b4       	in	r0, 0x2d	; 45
     c7a:	07 fe       	sbrs	r0, 7
     c7c:	fd cf       	rjmp	.-6      	; 0xc78 <send_cmd+0x1e>
	return SPDR;
     c7e:	8e b5       	in	r24, 0x2e	; 46
		deselect();
		if (!select()) return 0xFF;
     c80:	c9 df       	rcall	.-110    	; 0xc14 <select>
     c82:	89 2b       	or	r24, r25
     c84:	09 f4       	brne	.+2      	; 0xc88 <send_cmd+0x2e>
     c86:	56 c0       	rjmp	.+172    	; 0xd34 <send_cmd+0xda>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     c88:	8c 2f       	mov	r24, r28
     c8a:	80 64       	ori	r24, 0x40	; 64
	SPDR = dat;
     c8c:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     c8e:	0d b4       	in	r0, 0x2d	; 45
     c90:	07 fe       	sbrs	r0, 7
     c92:	fd cf       	rjmp	.-6      	; 0xc8e <send_cmd+0x34>
	return SPDR;
     c94:	8e b5       	in	r24, 0x2e	; 46
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     c96:	8f 2d       	mov	r24, r15
     c98:	99 27       	eor	r25, r25
     c9a:	aa 27       	eor	r26, r26
     c9c:	bb 27       	eor	r27, r27
	SPDR = dat;
     c9e:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     ca0:	0d b4       	in	r0, 0x2d	; 45
     ca2:	07 fe       	sbrs	r0, 7
     ca4:	fd cf       	rjmp	.-6      	; 0xca0 <send_cmd+0x46>
	return SPDR;
     ca6:	8e b5       	in	r24, 0x2e	; 46
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     ca8:	c7 01       	movw	r24, r14
     caa:	aa 27       	eor	r26, r26
     cac:	bb 27       	eor	r27, r27
	SPDR = dat;
     cae:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     cb0:	0d b4       	in	r0, 0x2d	; 45
     cb2:	07 fe       	sbrs	r0, 7
     cb4:	fd cf       	rjmp	.-6      	; 0xcb0 <send_cmd+0x56>
	return SPDR;
     cb6:	8e b5       	in	r24, 0x2e	; 46
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     cb8:	bb 27       	eor	r27, r27
     cba:	af 2d       	mov	r26, r15
     cbc:	9e 2d       	mov	r25, r14
     cbe:	8d 2d       	mov	r24, r13
	SPDR = dat;
     cc0:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     cc2:	0d b4       	in	r0, 0x2d	; 45
     cc4:	07 fe       	sbrs	r0, 7
     cc6:	fd cf       	rjmp	.-6      	; 0xcc2 <send_cmd+0x68>
	return SPDR;
     cc8:	8e b5       	in	r24, 0x2e	; 46
	SPDR = dat;
     cca:	ce bc       	out	0x2e, r12	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     ccc:	0d b4       	in	r0, 0x2d	; 45
     cce:	07 fe       	sbrs	r0, 7
     cd0:	fd cf       	rjmp	.-6      	; 0xccc <send_cmd+0x72>
	return SPDR;
     cd2:	8e b5       	in	r24, 0x2e	; 46
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     cd4:	85 e9       	ldi	r24, 0x95	; 149
     cd6:	c1 11       	cpse	r28, r1
     cd8:	18 c0       	rjmp	.+48     	; 0xd0a <send_cmd+0xb0>
	SPDR = dat;
     cda:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     cdc:	0d b4       	in	r0, 0x2d	; 45
     cde:	07 fe       	sbrs	r0, 7
     ce0:	fd cf       	rjmp	.-6      	; 0xcdc <send_cmd+0x82>
	return SPDR;
     ce2:	8e b5       	in	r24, 0x2e	; 46
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     ce4:	cc 30       	cpi	r28, 0x0C	; 12
     ce6:	b1 f0       	breq	.+44     	; 0xd14 <send_cmd+0xba>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     ce8:	9a e0       	ldi	r25, 0x0A	; 10
	SPDR = dat;
     cea:	2f ef       	ldi	r18, 0xFF	; 255
     cec:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     cee:	0d b4       	in	r0, 0x2d	; 45
     cf0:	07 fe       	sbrs	r0, 7
     cf2:	fd cf       	rjmp	.-6      	; 0xcee <send_cmd+0x94>
	return SPDR;
     cf4:	8e b5       	in	r24, 0x2e	; 46
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
     cf6:	87 ff       	sbrs	r24, 7
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <send_cmd+0xa4>
     cfa:	91 50       	subi	r25, 0x01	; 1
     cfc:	b9 f7       	brne	.-18     	; 0xcec <send_cmd+0x92>

	return res;			/* Return with the response value */
}
     cfe:	cf 91       	pop	r28
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	08 95       	ret
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     d0a:	87 e8       	ldi	r24, 0x87	; 135
     d0c:	c8 30       	cpi	r28, 0x08	; 8
     d0e:	29 f3       	breq	.-54     	; 0xcda <send_cmd+0x80>
	n = 0x01;							/* Dummy CRC + Stop */
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	e3 cf       	rjmp	.-58     	; 0xcda <send_cmd+0x80>
	SPDR = dat;
     d14:	8f ef       	ldi	r24, 0xFF	; 255
     d16:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     d18:	0d b4       	in	r0, 0x2d	; 45
     d1a:	07 fe       	sbrs	r0, 7
     d1c:	fd cf       	rjmp	.-6      	; 0xd18 <send_cmd+0xbe>
	return SPDR;
     d1e:	8e b5       	in	r24, 0x2e	; 46
     d20:	e3 cf       	rjmp	.-58     	; 0xce8 <send_cmd+0x8e>
		res = send_cmd(CMD55, 0);
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	ba 01       	movw	r22, r20
     d28:	87 e3       	ldi	r24, 0x37	; 55
     d2a:	97 df       	rcall	.-210    	; 0xc5a <send_cmd>
		if (res > 1) return res;
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	38 f7       	brcc	.-50     	; 0xcfe <send_cmd+0xa4>
		cmd &= 0x7F;
     d30:	cf 77       	andi	r28, 0x7F	; 127
     d32:	9d cf       	rjmp	.-198    	; 0xc6e <send_cmd+0x14>
		if (!select()) return 0xFF;
     d34:	8f ef       	ldi	r24, 0xFF	; 255
}
     d36:	cf 91       	pop	r28
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
     d40:	08 95       	ret

00000d42 <rcvr_datablock>:
	Timer1 = 20;
     d42:	24 e1       	ldi	r18, 0x14	; 20
     d44:	20 93 95 02 	sts	0x0295, r18	; 0x800295 <Timer1>
	SPDR = dat;
     d48:	3f ef       	ldi	r19, 0xFF	; 255
     d4a:	3e bd       	out	0x2e, r19	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     d4c:	0d b4       	in	r0, 0x2d	; 45
     d4e:	07 fe       	sbrs	r0, 7
     d50:	fd cf       	rjmp	.-6      	; 0xd4c <rcvr_datablock+0xa>
	return SPDR;
     d52:	2e b5       	in	r18, 0x2e	; 46
	} while ((token == 0xFF) && Timer1);
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	39 f4       	brne	.+14     	; 0xd66 <rcvr_datablock+0x24>
     d58:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <Timer1>
     d5c:	21 11       	cpse	r18, r1
     d5e:	f5 cf       	rjmp	.-22     	; 0xd4a <rcvr_datablock+0x8>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	80 e0       	ldi	r24, 0x00	; 0
}
     d64:	08 95       	ret
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     d66:	2e 3f       	cpi	r18, 0xFE	; 254
     d68:	d9 f7       	brne	.-10     	; 0xd60 <rcvr_datablock+0x1e>
     d6a:	fc 01       	movw	r30, r24
     d6c:	68 0f       	add	r22, r24
     d6e:	79 1f       	adc	r23, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     d70:	8f ef       	ldi	r24, 0xFF	; 255
     d72:	8e bd       	out	0x2e, r24	; 46
     d74:	0d b4       	in	r0, 0x2d	; 45
     d76:	07 fe       	sbrs	r0, 7
     d78:	fd cf       	rjmp	.-6      	; 0xd74 <rcvr_datablock+0x32>
     d7a:	9e b5       	in	r25, 0x2e	; 46
     d7c:	90 83       	st	Z, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     d7e:	8e bd       	out	0x2e, r24	; 46
     d80:	0d b4       	in	r0, 0x2d	; 45
     d82:	07 fe       	sbrs	r0, 7
     d84:	fd cf       	rjmp	.-6      	; 0xd80 <rcvr_datablock+0x3e>
     d86:	9e b5       	in	r25, 0x2e	; 46
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
     d8c:	e6 17       	cp	r30, r22
     d8e:	f7 07       	cpc	r31, r23
     d90:	81 f7       	brne	.-32     	; 0xd72 <rcvr_datablock+0x30>
	SPDR = dat;
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     d96:	0d b4       	in	r0, 0x2d	; 45
     d98:	07 fe       	sbrs	r0, 7
     d9a:	fd cf       	rjmp	.-6      	; 0xd96 <rcvr_datablock+0x54>
	return SPDR;
     d9c:	8e b5       	in	r24, 0x2e	; 46
	SPDR = dat;
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     da2:	0d b4       	in	r0, 0x2d	; 45
     da4:	07 fe       	sbrs	r0, 7
     da6:	fd cf       	rjmp	.-6      	; 0xda2 <rcvr_datablock+0x60>
	return SPDR;
     da8:	8e b5       	in	r24, 0x2e	; 46
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	08 95       	ret

00000db0 <xmit_datablock>:
	Timer2 = wt / 10;
     db0:	22 e3       	ldi	r18, 0x32	; 50
     db2:	20 93 94 02 	sts	0x0294, r18	; 0x800294 <Timer2>
	SPDR = dat;
     db6:	3f ef       	ldi	r19, 0xFF	; 255
     db8:	3e bd       	out	0x2e, r19	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     dba:	0d b4       	in	r0, 0x2d	; 45
     dbc:	07 fe       	sbrs	r0, 7
     dbe:	fd cf       	rjmp	.-6      	; 0xdba <xmit_datablock+0xa>
	return SPDR;
     dc0:	2e b5       	in	r18, 0x2e	; 46
	while (d != 0xFF && Timer2);
     dc2:	2f 3f       	cpi	r18, 0xFF	; 255
     dc4:	39 f0       	breq	.+14     	; 0xdd4 <xmit_datablock+0x24>
     dc6:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <Timer2>
     dca:	21 11       	cpse	r18, r1
     dcc:	f5 cf       	rjmp	.-22     	; 0xdb8 <xmit_datablock+0x8>
	if (!wait_ready(500)) return 0;
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	08 95       	ret
	SPDR = dat;
     dd4:	6e bd       	out	0x2e, r22	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     dd6:	0d b4       	in	r0, 0x2d	; 45
     dd8:	07 fe       	sbrs	r0, 7
     dda:	fd cf       	rjmp	.-6      	; 0xdd6 <xmit_datablock+0x26>
	return SPDR;
     ddc:	2e b5       	in	r18, 0x2e	; 46
	if (token != 0xFD) {	/* Is data token */
     dde:	6d 3f       	cpi	r22, 0xFD	; 253
     de0:	59 f1       	breq	.+86     	; 0xe38 <xmit_datablock+0x88>
     de2:	fc 01       	movw	r30, r24
     de4:	9c 01       	movw	r18, r24
     de6:	3e 5f       	subi	r19, 0xFE	; 254
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     de8:	80 81       	ld	r24, Z
     dea:	8e bd       	out	0x2e, r24	; 46
     dec:	0d b4       	in	r0, 0x2d	; 45
     dee:	07 fe       	sbrs	r0, 7
     df0:	fd cf       	rjmp	.-6      	; 0xdec <xmit_datablock+0x3c>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	8e bd       	out	0x2e, r24	; 46
     df6:	0d b4       	in	r0, 0x2d	; 45
     df8:	07 fe       	sbrs	r0, 7
     dfa:	fd cf       	rjmp	.-6      	; 0xdf6 <xmit_datablock+0x46>
     dfc:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
     dfe:	e2 17       	cp	r30, r18
     e00:	f3 07       	cpc	r31, r19
     e02:	91 f7       	brne	.-28     	; 0xde8 <xmit_datablock+0x38>
	SPDR = dat;
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     e08:	0d b4       	in	r0, 0x2d	; 45
     e0a:	07 fe       	sbrs	r0, 7
     e0c:	fd cf       	rjmp	.-6      	; 0xe08 <xmit_datablock+0x58>
	return SPDR;
     e0e:	8e b5       	in	r24, 0x2e	; 46
	SPDR = dat;
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     e14:	0d b4       	in	r0, 0x2d	; 45
     e16:	07 fe       	sbrs	r0, 7
     e18:	fd cf       	rjmp	.-6      	; 0xe14 <xmit_datablock+0x64>
	return SPDR;
     e1a:	8e b5       	in	r24, 0x2e	; 46
	SPDR = dat;
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     e20:	0d b4       	in	r0, 0x2d	; 45
     e22:	07 fe       	sbrs	r0, 7
     e24:	fd cf       	rjmp	.-6      	; 0xe20 <xmit_datablock+0x70>
	return SPDR;
     e26:	2e b5       	in	r18, 0x2e	; 46
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     e28:	2f 71       	andi	r18, 0x1F	; 31
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	25 30       	cpi	r18, 0x05	; 5
     e30:	11 f0       	breq	.+4      	; 0xe36 <xmit_datablock+0x86>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	08 95       	ret
}
     e36:	08 95       	ret
	return 1;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	08 95       	ret

00000e3e <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <disk_initialize+0x12>
     e50:	00 d0       	rcall	.+0      	; 0xe52 <disk_initialize+0x14>
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
     e56:	81 11       	cpse	r24, r1
     e58:	4b c0       	rjmp	.+150    	; 0xef0 <disk_initialize+0xb2>
	SPCR = 0;				/* Disable SPI function */
     e5a:	1c bc       	out	0x2c, r1	; 44
	DDRB &= ~(1<<PINB0); // Restore SS to Hi-Z
     e5c:	20 98       	cbi	0x04, 0	; 4
	DDRB  &= ~((1<<PINB1) | (1<<PINB2) | (1<<PINB7));	/* Set SCK/MOSI/CS as hi-z */
     e5e:	84 b1       	in	r24, 0x04	; 4
     e60:	89 77       	andi	r24, 0x79	; 121
     e62:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<PINB1) | (1<<PINB2));
     e64:	85 b1       	in	r24, 0x05	; 5
     e66:	89 7f       	andi	r24, 0xF9	; 249
     e68:	85 b9       	out	0x05, r24	; 5
	PORTB |=  (1<<PINB7);								/* Pull-up on CS */
     e6a:	2f 9a       	sbi	0x05, 7	; 5
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     e6c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Stat>
     e70:	81 fd       	sbrc	r24, 1
     e72:	2f c0       	rjmp	.+94     	; 0xed2 <disk_initialize+0x94>
	DDRB |= (1<<PINB0); // Set SS as output to avoid bus contention....
     e74:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (1<<PINB1) | (1<<PINB7);				/* Clock idles low */
     e76:	85 b1       	in	r24, 0x05	; 5
     e78:	82 68       	ori	r24, 0x82	; 130
     e7a:	85 b9       	out	0x05, r24	; 5
	DDRB  |= (1<<PINB1) | (1<<PINB2) | (1<<PINB7);	/* Configure SCK/MOSI/CS as output */
     e7c:	84 b1       	in	r24, 0x04	; 4
     e7e:	86 68       	ori	r24, 0x86	; 134
     e80:	84 b9       	out	0x04, r24	; 4
	SPCR = 0x52;			/* Enable SPI function in mode 0 */
     e82:	82 e5       	ldi	r24, 0x52	; 82
     e84:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x01;			/* SPI 2x mode */
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	9d bd       	out	0x2d, r25	; 45
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
     e8a:	8c bd       	out	0x2c, r24	; 44
     e8c:	1a e0       	ldi	r17, 0x0A	; 10
	SPDR = dat;
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     e92:	0d b4       	in	r0, 0x2d	; 45
     e94:	07 fe       	sbrs	r0, 7
     e96:	fd cf       	rjmp	.-6      	; 0xe92 <disk_initialize+0x54>
	return SPDR;
     e98:	9e b5       	in	r25, 0x2e	; 46
     e9a:	11 50       	subi	r17, 0x01	; 1
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <disk_initialize+0x52>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	ba 01       	movw	r22, r20
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	d9 de       	rcall	.-590    	; 0xc5a <send_cmd>
     ea8:	08 2f       	mov	r16, r24
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	69 f1       	breq	.+90     	; 0xf08 <disk_initialize+0xca>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     eae:	10 93 93 02 	sts	0x0293, r17	; 0x800293 <CardType>
	CS_HIGH();		/* Set CS# high */
     eb2:	2f 9a       	sbi	0x05, 7	; 5
	SPDR = dat;
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     eb8:	0d b4       	in	r0, 0x2d	; 45
     eba:	07 fe       	sbrs	r0, 7
     ebc:	fd cf       	rjmp	.-6      	; 0xeb8 <disk_initialize+0x7a>
	return SPDR;
     ebe:	8e b5       	in	r24, 0x2e	; 46
	deselect();

	if (ty) {			/* Initialization succeded */
     ec0:	11 23       	and	r17, r17
     ec2:	c1 f0       	breq	.+48     	; 0xef4 <disk_initialize+0xb6>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     ec4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Stat>
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Stat>
		FCLK_FAST();
     ece:	80 e5       	ldi	r24, 0x50	; 80
     ed0:	8c bd       	out	0x2c, r24	; 44
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
     ed2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Stat>
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	08 95       	ret
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	f1 cf       	rjmp	.-30     	; 0xed6 <disk_initialize+0x98>
	SPCR = 0;				/* Disable SPI function */
     ef4:	1c bc       	out	0x2c, r1	; 44
	DDRB &= ~(1<<PINB0); // Restore SS to Hi-Z
     ef6:	20 98       	cbi	0x04, 0	; 4
	DDRB  &= ~((1<<PINB1) | (1<<PINB2) | (1<<PINB7));	/* Set SCK/MOSI/CS as hi-z */
     ef8:	84 b1       	in	r24, 0x04	; 4
     efa:	89 77       	andi	r24, 0x79	; 121
     efc:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<PINB1) | (1<<PINB2));
     efe:	85 b1       	in	r24, 0x05	; 5
     f00:	89 7f       	andi	r24, 0xF9	; 249
     f02:	85 b9       	out	0x05, r24	; 5
	PORTB |=  (1<<PINB7);								/* Pull-up on CS */
     f04:	2f 9a       	sbi	0x05, 7	; 5
     f06:	e5 cf       	rjmp	.-54     	; 0xed2 <disk_initialize+0x94>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     f08:	84 e6       	ldi	r24, 0x64	; 100
     f0a:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     f0e:	4a ea       	ldi	r20, 0xAA	; 170
     f10:	51 e0       	ldi	r21, 0x01	; 1
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	88 e0       	ldi	r24, 0x08	; 8
     f18:	a0 de       	rcall	.-704    	; 0xc5a <send_cmd>
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	09 f0       	breq	.+2      	; 0xf20 <disk_initialize+0xe2>
     f1e:	45 c0       	rjmp	.+138    	; 0xfaa <disk_initialize+0x16c>
     f20:	ce 01       	movw	r24, r28
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	6c 01       	movw	r12, r24
     f26:	7e 01       	movw	r14, r28
     f28:	95 e0       	ldi	r25, 0x05	; 5
     f2a:	e9 0e       	add	r14, r25
     f2c:	f1 1c       	adc	r15, r1
     f2e:	f6 01       	movw	r30, r12
	SPDR = dat;
     f30:	9f ef       	ldi	r25, 0xFF	; 255
     f32:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     f34:	0d b4       	in	r0, 0x2d	; 45
     f36:	07 fe       	sbrs	r0, 7
     f38:	fd cf       	rjmp	.-6      	; 0xf34 <disk_initialize+0xf6>
	return SPDR;
     f3a:	8e b5       	in	r24, 0x2e	; 46
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
     f3c:	81 93       	st	Z+, r24
     f3e:	ee 15       	cp	r30, r14
     f40:	ff 05       	cpc	r31, r15
     f42:	b9 f7       	brne	.-18     	; 0xf32 <disk_initialize+0xf4>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	09 f0       	breq	.+2      	; 0xf4c <disk_initialize+0x10e>
     f4a:	b1 cf       	rjmp	.-158    	; 0xeae <disk_initialize+0x70>
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	8a 3a       	cpi	r24, 0xAA	; 170
     f50:	09 f0       	breq	.+2      	; 0xf54 <disk_initialize+0x116>
     f52:	ad cf       	rjmp	.-166    	; 0xeae <disk_initialize+0x70>
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <disk_initialize+0x128>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e4       	ldi	r23, 0x40	; 64
     f5e:	89 ea       	ldi	r24, 0xA9	; 169
     f60:	7c de       	rcall	.-776    	; 0xc5a <send_cmd>
     f62:	88 23       	and	r24, r24
     f64:	21 f0       	breq	.+8      	; 0xf6e <disk_initialize+0x130>
     f66:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <Timer1>
     f6a:	81 11       	cpse	r24, r1
     f6c:	f4 cf       	rjmp	.-24     	; 0xf56 <disk_initialize+0x118>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     f6e:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <Timer1>
     f72:	88 23       	and	r24, r24
     f74:	09 f4       	brne	.+2      	; 0xf78 <disk_initialize+0x13a>
     f76:	9b cf       	rjmp	.-202    	; 0xeae <disk_initialize+0x70>
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	ba 01       	movw	r22, r20
     f7e:	8a e3       	ldi	r24, 0x3A	; 58
     f80:	6c de       	rcall	.-808    	; 0xc5a <send_cmd>
     f82:	81 11       	cpse	r24, r1
     f84:	94 cf       	rjmp	.-216    	; 0xeae <disk_initialize+0x70>
	SPDR = dat;
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     f8a:	0d b4       	in	r0, 0x2d	; 45
     f8c:	07 fe       	sbrs	r0, 7
     f8e:	fd cf       	rjmp	.-6      	; 0xf8a <disk_initialize+0x14c>
	return SPDR;
     f90:	9e b5       	in	r25, 0x2e	; 46
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
     f92:	f6 01       	movw	r30, r12
     f94:	91 93       	st	Z+, r25
     f96:	6f 01       	movw	r12, r30
     f98:	ee 15       	cp	r30, r14
     f9a:	ff 05       	cpc	r31, r15
     f9c:	a9 f7       	brne	.-22     	; 0xf88 <disk_initialize+0x14a>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	14 e0       	ldi	r17, 0x04	; 4
     fa2:	86 ff       	sbrs	r24, 6
     fa4:	84 cf       	rjmp	.-248    	; 0xeae <disk_initialize+0x70>
     fa6:	1c e0       	ldi	r17, 0x0C	; 12
     fa8:	82 cf       	rjmp	.-252    	; 0xeae <disk_initialize+0x70>
			if (send_cmd(ACMD41, 0) <= 1) 	{
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	ba 01       	movw	r22, r20
     fb0:	89 ea       	ldi	r24, 0xA9	; 169
     fb2:	53 de       	rcall	.-858    	; 0xc5a <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     fb4:	ff 24       	eor	r15, r15
     fb6:	f3 94       	inc	r15
			if (send_cmd(ACMD41, 0) <= 1) 	{
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	58 f4       	brcc	.+22     	; 0xfd2 <disk_initialize+0x194>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	f8 2e       	mov	r15, r24
     fc0:	09 ea       	ldi	r16, 0xA9	; 169
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <disk_initialize+0x194>
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	ba 01       	movw	r22, r20
     fca:	80 2f       	mov	r24, r16
     fcc:	46 de       	rcall	.-884    	; 0xc5a <send_cmd>
     fce:	88 23       	and	r24, r24
     fd0:	21 f0       	breq	.+8      	; 0xfda <disk_initialize+0x19c>
     fd2:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <Timer1>
     fd6:	81 11       	cpse	r24, r1
     fd8:	f5 cf       	rjmp	.-22     	; 0xfc4 <disk_initialize+0x186>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     fda:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <Timer1>
     fde:	88 23       	and	r24, r24
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <disk_initialize+0x1a6>
     fe2:	65 cf       	rjmp	.-310    	; 0xeae <disk_initialize+0x70>
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	52 e0       	ldi	r21, 0x02	; 2
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	80 e1       	ldi	r24, 0x10	; 16
     fee:	35 de       	rcall	.-918    	; 0xc5a <send_cmd>
     ff0:	81 11       	cpse	r24, r1
     ff2:	5d cf       	rjmp	.-326    	; 0xeae <disk_initialize+0x70>
     ff4:	1f 2d       	mov	r17, r15
     ff6:	5b cf       	rjmp	.-330    	; 0xeae <disk_initialize+0x70>

00000ff8 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
     ff8:	81 11       	cpse	r24, r1
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <disk_status+0xa>
	return Stat;
     ffc:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Stat>
    1000:	08 95       	ret
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    1002:	81 e0       	ldi	r24, 0x01	; 1
}
    1004:	08 95       	ret

00001006 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1006:	ef 92       	push	r14
    1008:	ff 92       	push	r15
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    1014:	81 11       	cpse	r24, r1
    1016:	47 c0       	rjmp	.+142    	; 0x10a6 <disk_read+0xa0>
    1018:	01 15       	cp	r16, r1
    101a:	11 05       	cpc	r17, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <disk_read+0x1a>
    101e:	43 c0       	rjmp	.+134    	; 0x10a6 <disk_read+0xa0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1020:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Stat>
    1024:	80 fd       	sbrc	r24, 0
    1026:	49 c0       	rjmp	.+146    	; 0x10ba <disk_read+0xb4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    1028:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <CardType>
    102c:	83 fd       	sbrc	r24, 3
    102e:	07 c0       	rjmp	.+14     	; 0x103e <disk_read+0x38>
    1030:	e9 e0       	ldi	r30, 0x09	; 9
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	44 1f       	adc	r20, r20
    1038:	55 1f       	adc	r21, r21
    103a:	ea 95       	dec	r30
    103c:	d1 f7       	brne	.-12     	; 0x1032 <disk_read+0x2c>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    103e:	71 e1       	ldi	r23, 0x11	; 17
    1040:	e7 2e       	mov	r14, r23
    1042:	02 30       	cpi	r16, 0x02	; 2
    1044:	11 05       	cpc	r17, r1
    1046:	10 f0       	brcs	.+4      	; 0x104c <disk_read+0x46>
    1048:	62 e1       	ldi	r22, 0x12	; 18
    104a:	e6 2e       	mov	r14, r22
	if (send_cmd(cmd, sector) == 0) {
    104c:	ba 01       	movw	r22, r20
    104e:	a9 01       	movw	r20, r18
    1050:	8e 2d       	mov	r24, r14
    1052:	03 de       	rcall	.-1018   	; 0xc5a <send_cmd>
    1054:	f8 2e       	mov	r15, r24
    1056:	88 23       	and	r24, r24
    1058:	a9 f0       	breq	.+42     	; 0x1084 <disk_read+0x7e>
    105a:	ff 24       	eor	r15, r15
    105c:	f3 94       	inc	r15
	CS_HIGH();		/* Set CS# high */
    105e:	2f 9a       	sbi	0x05, 7	; 5
	SPDR = dat;
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1064:	0d b4       	in	r0, 0x2d	; 45
    1066:	07 fe       	sbrs	r0, 7
    1068:	fd cf       	rjmp	.-6      	; 0x1064 <disk_read+0x5e>
	return SPDR;
    106a:	8e b5       	in	r24, 0x2e	; 46
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    106c:	8f 2d       	mov	r24, r15
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	08 95       	ret
			buff += 512;
    107c:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    107e:	01 50       	subi	r16, 0x01	; 1
    1080:	11 09       	sbc	r17, r1
    1082:	41 f0       	breq	.+16     	; 0x1094 <disk_read+0x8e>
			if (!rcvr_datablock(buff, 512)) break;
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	72 e0       	ldi	r23, 0x02	; 2
    1088:	ce 01       	movw	r24, r28
    108a:	5b de       	rcall	.-842    	; 0xd42 <rcvr_datablock>
    108c:	89 2b       	or	r24, r25
    108e:	b1 f7       	brne	.-20     	; 0x107c <disk_read+0x76>
    1090:	ff 24       	eor	r15, r15
    1092:	f3 94       	inc	r15
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    1094:	82 e1       	ldi	r24, 0x12	; 18
    1096:	e8 12       	cpse	r14, r24
    1098:	e2 cf       	rjmp	.-60     	; 0x105e <disk_read+0x58>
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	ba 01       	movw	r22, r20
    10a0:	8c e0       	ldi	r24, 0x0C	; 12
    10a2:	db dd       	rcall	.-1098   	; 0xc5a <send_cmd>
    10a4:	dc cf       	rjmp	.-72     	; 0x105e <disk_read+0x58>
	if (pdrv || !count) return RES_PARERR;
    10a6:	94 e0       	ldi	r25, 0x04	; 4
    10a8:	f9 2e       	mov	r15, r25
}
    10aa:	8f 2d       	mov	r24, r15
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	08 95       	ret
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    10ba:	83 e0       	ldi	r24, 0x03	; 3
    10bc:	f8 2e       	mov	r15, r24
}
    10be:	8f 2d       	mov	r24, r15
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	08 95       	ret

000010ce <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    10ce:	cf 92       	push	r12
    10d0:	df 92       	push	r13
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	eb 01       	movw	r28, r22
    10e0:	69 01       	movw	r12, r18
    10e2:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    10e4:	81 11       	cpse	r24, r1
    10e6:	44 c0       	rjmp	.+136    	; 0x1170 <disk_write+0xa2>
    10e8:	01 15       	cp	r16, r1
    10ea:	11 05       	cpc	r17, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <disk_write+0x22>
    10ee:	40 c0       	rjmp	.+128    	; 0x1170 <disk_write+0xa2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    10f0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Stat>
    10f4:	23 e0       	ldi	r18, 0x03	; 3
    10f6:	80 fd       	sbrc	r24, 0
    10f8:	1d c0       	rjmp	.+58     	; 0x1134 <disk_write+0x66>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    10fa:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Stat>
    10fe:	22 e0       	ldi	r18, 0x02	; 2
    1100:	82 fd       	sbrc	r24, 2
    1102:	18 c0       	rjmp	.+48     	; 0x1134 <disk_write+0x66>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    1104:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <CardType>
    1108:	83 ff       	sbrs	r24, 3
    110a:	34 c0       	rjmp	.+104    	; 0x1174 <disk_write+0xa6>

	if (count == 1) {	/* Single block write */
    110c:	01 30       	cpi	r16, 0x01	; 1
    110e:	11 05       	cpc	r17, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <disk_write+0x46>
    1112:	3e c0       	rjmp	.+124    	; 0x1190 <disk_write+0xc2>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    1114:	86 70       	andi	r24, 0x06	; 6
    1116:	b1 f5       	brne	.+108    	; 0x1184 <disk_write+0xb6>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    1118:	b7 01       	movw	r22, r14
    111a:	a6 01       	movw	r20, r12
    111c:	89 e1       	ldi	r24, 0x19	; 25
    111e:	9d dd       	rcall	.-1222   	; 0xc5a <send_cmd>
    1120:	88 23       	and	r24, r24
    1122:	b1 f0       	breq	.+44     	; 0x1150 <disk_write+0x82>
    1124:	21 e0       	ldi	r18, 0x01	; 1
	CS_HIGH();		/* Set CS# high */
    1126:	2f 9a       	sbi	0x05, 7	; 5
	SPDR = dat;
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    112c:	0d b4       	in	r0, 0x2d	; 45
    112e:	07 fe       	sbrs	r0, 7
    1130:	fd cf       	rjmp	.-6      	; 0x112c <disk_write+0x5e>
	return SPDR;
    1132:	8e b5       	in	r24, 0x2e	; 46
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    1134:	82 2f       	mov	r24, r18
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	df 90       	pop	r13
    1144:	cf 90       	pop	r12
    1146:	08 95       	ret
				buff += 512;
    1148:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    114a:	01 50       	subi	r16, 0x01	; 1
    114c:	11 09       	sbc	r17, r1
    114e:	29 f0       	breq	.+10     	; 0x115a <disk_write+0x8c>
				if (!xmit_datablock(buff, 0xFC)) break;
    1150:	6c ef       	ldi	r22, 0xFC	; 252
    1152:	ce 01       	movw	r24, r28
    1154:	2d de       	rcall	.-934    	; 0xdb0 <xmit_datablock>
    1156:	89 2b       	or	r24, r25
    1158:	b9 f7       	brne	.-18     	; 0x1148 <disk_write+0x7a>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    115a:	6d ef       	ldi	r22, 0xFD	; 253
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	27 de       	rcall	.-946    	; 0xdb0 <xmit_datablock>
    1162:	89 2b       	or	r24, r25
    1164:	f9 f2       	breq	.-66     	; 0x1124 <disk_write+0x56>
    1166:	21 e0       	ldi	r18, 0x01	; 1
    1168:	01 2b       	or	r16, r17
    116a:	e9 f6       	brne	.-70     	; 0x1126 <disk_write+0x58>
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	db cf       	rjmp	.-74     	; 0x1126 <disk_write+0x58>
	if (pdrv || !count) return RES_PARERR;
    1170:	24 e0       	ldi	r18, 0x04	; 4
    1172:	e0 cf       	rjmp	.-64     	; 0x1134 <disk_write+0x66>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    1174:	99 e0       	ldi	r25, 0x09	; 9
    1176:	cc 0c       	add	r12, r12
    1178:	dd 1c       	adc	r13, r13
    117a:	ee 1c       	adc	r14, r14
    117c:	ff 1c       	adc	r15, r15
    117e:	9a 95       	dec	r25
    1180:	d1 f7       	brne	.-12     	; 0x1176 <disk_write+0xa8>
    1182:	c4 cf       	rjmp	.-120    	; 0x110c <disk_write+0x3e>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    1184:	a8 01       	movw	r20, r16
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	87 e9       	ldi	r24, 0x97	; 151
    118c:	66 dd       	rcall	.-1332   	; 0xc5a <send_cmd>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    118e:	c4 cf       	rjmp	.-120    	; 0x1118 <disk_write+0x4a>
    1190:	b7 01       	movw	r22, r14
    1192:	a6 01       	movw	r20, r12
    1194:	88 e1       	ldi	r24, 0x18	; 24
    1196:	61 dd       	rcall	.-1342   	; 0xc5a <send_cmd>
    1198:	81 11       	cpse	r24, r1
			&& xmit_datablock(buff, 0xFE))
    119a:	c4 cf       	rjmp	.-120    	; 0x1124 <disk_write+0x56>
    119c:	6e ef       	ldi	r22, 0xFE	; 254
    119e:	ce 01       	movw	r24, r28
    11a0:	07 de       	rcall	.-1010   	; 0xdb0 <xmit_datablock>
    11a2:	21 e0       	ldi	r18, 0x01	; 1
    11a4:	89 2b       	or	r24, r25
    11a6:	09 f4       	brne	.+2      	; 0x11aa <disk_write+0xdc>
    11a8:	be cf       	rjmp	.-132    	; 0x1126 <disk_write+0x58>
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	bc cf       	rjmp	.-136    	; 0x1126 <disk_write+0x58>

000011ae <disk_timerproc>:

void disk_timerproc (void)
{
	BYTE n, s;

	n = Timer1;				/* 100Hz decrement timer */
    11ae:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <Timer1>
	if (n) Timer1 = --n;
    11b2:	88 23       	and	r24, r24
    11b4:	19 f0       	breq	.+6      	; 0x11bc <disk_timerproc+0xe>
    11b6:	81 50       	subi	r24, 0x01	; 1
    11b8:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <Timer1>
	n = Timer2;
    11bc:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <Timer2>
	if (n) Timer2 = --n;
    11c0:	88 23       	and	r24, r24
    11c2:	19 f0       	breq	.+6      	; 0x11ca <disk_timerproc+0x1c>
    11c4:	81 50       	subi	r24, 0x01	; 1
    11c6:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <Timer2>

	s = Stat;
    11ca:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Stat>
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if (MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
    11ce:	89 7f       	andi	r24, 0xF9	; 249
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    11d0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Stat>
}
    11d4:	08 95       	ret

000011d6 <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
        USB_FREEZE();				// enable USB
    11dc:	80 ea       	ldi	r24, 0xA0	; 160
    11de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    11e2:	82 e1       	ldi	r24, 0x12	; 18
    11e4:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    11e6:	09 b4       	in	r0, 0x29	; 41
    11e8:	00 fe       	sbrs	r0, 0
    11ea:	fd cf       	rjmp	.-6      	; 0x11e6 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
    11ec:	80 e9       	ldi	r24, 0x90	; 144
    11ee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
        UDCON = 0;				// enable attach resistor
    11f2:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	usb_configuration = 0;
    11f6:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <usb_configuration>
	cdc_line_rtsdtr = 0;
    11fa:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <cdc_line_rtsdtr>
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    11fe:	8c e0       	ldi	r24, 0x0C	; 12
    1200:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	sei();
    1204:	78 94       	sei
}
    1206:	08 95       	ret

00001208 <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1208:	2f b7       	in	r18, 0x3f	; 63
	cli();
    120a:	f8 94       	cli
	if (!usb_configuration) {
    120c:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <usb_configuration>
    1210:	88 23       	and	r24, r24
    1212:	f9 f0       	breq	.+62     	; 0x1252 <usb_serial_getchar+0x4a>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	retry:
	c = UEINTX;
    121a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(c & (1<<RWAL))) {
    121e:	85 fd       	sbrc	r24, 5
    1220:	0c c0       	rjmp	.+24     	; 0x123a <usb_serial_getchar+0x32>
		// no data in buffer
		if (c & (1<<RXOUTI)) {
    1222:	82 ff       	sbrs	r24, 2
    1224:	16 c0       	rjmp	.+44     	; 0x1252 <usb_serial_getchar+0x4a>
			UEINTX = 0x6B;
    1226:	9b e6       	ldi	r25, 0x6B	; 107
    1228:	02 c0       	rjmp	.+4      	; 0x122e <usb_serial_getchar+0x26>
		if (c & (1<<RXOUTI)) {
    122a:	82 ff       	sbrs	r24, 2
    122c:	12 c0       	rjmp	.+36     	; 0x1252 <usb_serial_getchar+0x4a>
			UEINTX = 0x6B;
    122e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	c = UEINTX;
    1232:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(c & (1<<RWAL))) {
    1236:	85 ff       	sbrs	r24, 5
    1238:	f8 cf       	rjmp	.-16     	; 0x122a <usb_serial_getchar+0x22>
		}	
		SREG = intr_state;
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
    123a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    123e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1242:	95 fd       	sbrc	r25, 5
    1244:	03 c0       	rjmp	.+6      	; 0x124c <usb_serial_getchar+0x44>
    1246:	9b e6       	ldi	r25, 0x6B	; 107
    1248:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	SREG = intr_state;
    124c:	2f bf       	out	0x3f, r18	; 63
	return c;
    124e:	90 e0       	ldi	r25, 0x00	; 0
}
    1250:	08 95       	ret
		SREG = intr_state;
    1252:	2f bf       	out	0x3f, r18	; 63
		return -1;
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	9f ef       	ldi	r25, 0xFF	; 255
    1258:	08 95       	ret

0000125a <usb_serial_available>:
// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
	uint8_t n=0, i, intr_state;

	intr_state = SREG;
    125a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    125c:	f8 94       	cli
	if (usb_configuration) {
    125e:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <usb_configuration>
    1262:	88 23       	and	r24, r24
    1264:	a1 f0       	breq	.+40     	; 0x128e <usb_serial_available+0x34>
		UENUM = CDC_RX_ENDPOINT;
    1266:	83 e0       	ldi	r24, 0x03	; 3
    1268:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		n = UEBCLX;
    126c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		if (!n) {
    1270:	81 11       	cpse	r24, r1
    1272:	0b c0       	rjmp	.+22     	; 0x128a <usb_serial_available+0x30>
			i = UEINTX;
    1274:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
    1278:	22 ff       	sbrs	r18, 2
    127a:	09 c0       	rjmp	.+18     	; 0x128e <usb_serial_available+0x34>
    127c:	82 2f       	mov	r24, r18
    127e:	80 72       	andi	r24, 0x20	; 32
    1280:	25 fd       	sbrc	r18, 5
    1282:	05 c0       	rjmp	.+10     	; 0x128e <usb_serial_available+0x34>
    1284:	2b e6       	ldi	r18, 0x6B	; 107
    1286:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
	}
	SREG = intr_state;
    128a:	9f bf       	out	0x3f, r25	; 63
	return n;
}
    128c:	08 95       	ret
	uint8_t n=0, i, intr_state;
    128e:	80 e0       	ldi	r24, 0x00	; 0
	SREG = intr_state;
    1290:	9f bf       	out	0x3f, r25	; 63
}
    1292:	08 95       	ret

00001294 <usb_serial_putchar>:
int8_t usb_serial_putchar(uint8_t c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1294:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <usb_configuration>
    1298:	99 23       	and	r25, r25
    129a:	09 f4       	brne	.+2      	; 0x129e <usb_serial_putchar+0xa>
    129c:	43 c0       	rjmp	.+134    	; 0x1324 <usb_serial_putchar+0x90>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    129e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    12a0:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    12a2:	24 e0       	ldi	r18, 0x04	; 4
    12a4:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    12a8:	20 91 97 02 	lds	r18, 0x0297	; 0x800297 <transmit_previous_timeout>
    12ac:	21 11       	cpse	r18, r1
    12ae:	32 c0       	rjmp	.+100    	; 0x1314 <usb_serial_putchar+0x80>
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    12b0:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    12b4:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    12b6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ba:	25 fd       	sbrc	r18, 5
    12bc:	1c c0       	rjmp	.+56     	; 0x12f6 <usb_serial_putchar+0x62>
		SREG = intr_state;
    12be:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    12c0:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    12c4:	39 17       	cp	r19, r25
    12c6:	81 f1       	breq	.+96     	; 0x1328 <usb_serial_putchar+0x94>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    12c8:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <usb_configuration>
    12cc:	99 23       	and	r25, r25
    12ce:	51 f1       	breq	.+84     	; 0x1324 <usb_serial_putchar+0x90>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    12d0:	44 e0       	ldi	r20, 0x04	; 4
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <usb_serial_putchar+0x52>
		SREG = intr_state;
    12d4:	9f bf       	out	0x3f, r25	; 63
		if (UDFNUML == timeout) {
    12d6:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    12da:	93 17       	cp	r25, r19
    12dc:	29 f1       	breq	.+74     	; 0x1328 <usb_serial_putchar+0x94>
		if (!usb_configuration) return -1;
    12de:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <usb_configuration>
    12e2:	99 23       	and	r25, r25
    12e4:	f9 f0       	breq	.+62     	; 0x1324 <usb_serial_putchar+0x90>
		intr_state = SREG;
    12e6:	9f b7       	in	r25, 0x3f	; 63
		cli();
    12e8:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    12ea:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (UEINTX & (1<<RWAL)) break;
    12ee:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12f2:	25 ff       	sbrs	r18, 5
    12f4:	ef cf       	rjmp	.-34     	; 0x12d4 <usb_serial_putchar+0x40>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
    12f6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    12fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12fe:	85 fd       	sbrc	r24, 5
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <usb_serial_putchar+0x74>
    1302:	8a e3       	ldi	r24, 0x3A	; 58
    1304:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1308:	85 e0       	ldi	r24, 0x05	; 5
    130a:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <transmit_flush_timer>
	SREG = intr_state;
    130e:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1310:	80 e0       	ldi	r24, 0x00	; 0
}
    1312:	08 95       	ret
		if (!(UEINTX & (1<<RWAL))) {
    1314:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1318:	25 ff       	sbrs	r18, 5
    131a:	03 c0       	rjmp	.+6      	; 0x1322 <usb_serial_putchar+0x8e>
		transmit_previous_timeout = 0;
    131c:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <transmit_previous_timeout>
    1320:	c7 cf       	rjmp	.-114    	; 0x12b0 <usb_serial_putchar+0x1c>
			SREG = intr_state;
    1322:	9f bf       	out	0x3f, r25	; 63
			return -1;
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	08 95       	ret
			transmit_previous_timeout = 1;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <transmit_previous_timeout>
			return -1;
    132e:	8f ef       	ldi	r24, 0xFF	; 255
    1330:	08 95       	ret

00001332 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1332:	1f 92       	push	r1
    1334:	1f b6       	in	r1, 0x3f	; 63
    1336:	1f 92       	push	r1
    1338:	11 24       	eor	r1, r1
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
    133e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    1342:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    1346:	83 ff       	sbrs	r24, 3
    1348:	11 c0       	rjmp	.+34     	; 0x136c <__vector_10+0x3a>
		UENUM = 0;
    134a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    1354:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1358:	92 e1       	ldi	r25, 0x12	; 18
    135a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    135e:	98 e0       	ldi	r25, 0x08	; 8
    1360:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    1364:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <usb_configuration>
		cdc_line_rtsdtr = 0;
    1368:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <cdc_line_rtsdtr>
        }
	if (intbits & (1<<SOFI)) {
    136c:	82 ff       	sbrs	r24, 2
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <__vector_10+0x64>
		if (usb_configuration) {
    1370:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <usb_configuration>
    1374:	88 23       	and	r24, r24
    1376:	79 f0       	breq	.+30     	; 0x1396 <__vector_10+0x64>
			t = transmit_flush_timer;
    1378:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <transmit_flush_timer>
			if (t) {
    137c:	88 23       	and	r24, r24
    137e:	59 f0       	breq	.+22     	; 0x1396 <__vector_10+0x64>
				transmit_flush_timer = --t;
    1380:	81 50       	subi	r24, 0x01	; 1
    1382:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <transmit_flush_timer>
				if (!t) {
    1386:	81 11       	cpse	r24, r1
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <__vector_10+0x64>
					UENUM = CDC_TX_ENDPOINT;
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    1390:	8a e3       	ldi	r24, 0x3A	; 58
    1392:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
		}
	}
}
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	1f 90       	pop	r1
    139c:	1f be       	out	0x3f, r1	; 63
    139e:	1f 90       	pop	r1
    13a0:	18 95       	reti

000013a2 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    13a2:	1f 92       	push	r1
    13a4:	1f b6       	in	r1, 0x3f	; 63
    13a6:	1f 92       	push	r1
    13a8:	11 24       	eor	r1, r1
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	2f 93       	push	r18
    13b0:	3f 93       	push	r19
    13b2:	4f 93       	push	r20
    13b4:	5f 93       	push	r21
    13b6:	6f 93       	push	r22
    13b8:	7f 93       	push	r23
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	cf 93       	push	r28
    13c4:	ef 93       	push	r30
    13c6:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    13c8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        intbits = UEINTX;
    13cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
    13d0:	83 ff       	sbrs	r24, 3
    13d2:	33 c0       	rjmp	.+102    	; 0x143a <__vector_11+0x98>
                bmRequestType = UEDATX;
    13d4:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                bRequest = UEDATX;
    13d8:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue = UEDATX;
    13dc:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue |= (UEDATX << 8);
    13e0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    13e4:	58 2f       	mov	r21, r24
                wIndex = UEDATX;
    13e6:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wIndex |= (UEDATX << 8);
    13ea:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    13ee:	78 2f       	mov	r23, r24
                wLength = UEDATX;
    13f0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wLength |= (UEDATX << 8);
    13f4:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    13f8:	22 ef       	ldi	r18, 0xF2	; 242
    13fa:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    13fe:	96 30       	cpi	r25, 0x06	; 6
    1400:	91 f1       	breq	.+100    	; 0x1466 <__vector_11+0xc4>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1402:	95 30       	cpi	r25, 0x05	; 5
    1404:	09 f4       	brne	.+2      	; 0x1408 <__vector_11+0x66>
    1406:	e8 c0       	rjmp	.+464    	; 0x15d8 <__vector_11+0x236>
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1408:	99 30       	cpi	r25, 0x09	; 9
    140a:	09 f4       	brne	.+2      	; 0x140e <__vector_11+0x6c>
    140c:	8f c0       	rjmp	.+286    	; 0x152c <__vector_11+0x18a>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    140e:	98 30       	cpi	r25, 0x08	; 8
    1410:	09 f4       	brne	.+2      	; 0x1414 <__vector_11+0x72>
    1412:	b8 c0       	rjmp	.+368    	; 0x1584 <__vector_11+0x1e2>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1414:	91 32       	cpi	r25, 0x21	; 33
    1416:	09 f4       	brne	.+2      	; 0x141a <__vector_11+0x78>
    1418:	c4 c0       	rjmp	.+392    	; 0x15a2 <__vector_11+0x200>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    141a:	90 32       	cpi	r25, 0x20	; 32
    141c:	09 f4       	brne	.+2      	; 0x1420 <__vector_11+0x7e>
    141e:	e7 c0       	rjmp	.+462    	; 0x15ee <__vector_11+0x24c>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1420:	92 32       	cpi	r25, 0x22	; 34
    1422:	09 f4       	brne	.+2      	; 0x1426 <__vector_11+0x84>
    1424:	26 c1       	rjmp	.+588    	; 0x1672 <__vector_11+0x2d0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1426:	99 23       	and	r25, r25
    1428:	09 f4       	brne	.+2      	; 0x142c <__vector_11+0x8a>
    142a:	71 c0       	rjmp	.+226    	; 0x150e <__vector_11+0x16c>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    142c:	89 2f       	mov	r24, r25
    142e:	8d 7f       	andi	r24, 0xFD	; 253
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	19 f4       	brne	.+6      	; 0x143a <__vector_11+0x98>
		  && bmRequestType == 0x02 && wValue == 0) {
    1434:	32 30       	cpi	r19, 0x02	; 2
    1436:	09 f4       	brne	.+2      	; 0x143a <__vector_11+0x98>
    1438:	f1 c0       	rjmp	.+482    	; 0x161c <__vector_11+0x27a>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    143a:	81 e2       	ldi	r24, 0x21	; 33
    143c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	cf 91       	pop	r28
    1446:	bf 91       	pop	r27
    1448:	af 91       	pop	r26
    144a:	9f 91       	pop	r25
    144c:	8f 91       	pop	r24
    144e:	7f 91       	pop	r23
    1450:	6f 91       	pop	r22
    1452:	5f 91       	pop	r21
    1454:	4f 91       	pop	r20
    1456:	3f 91       	pop	r19
    1458:	2f 91       	pop	r18
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	1f 90       	pop	r1
    1460:	1f be       	out	0x3f, r1	; 63
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti
    1466:	2c ea       	ldi	r18, 0xAC	; 172
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	06 ed       	ldi	r16, 0xD6	; 214
    146c:	10 e0       	ldi	r17, 0x00	; 0
				desc_val = pgm_read_word(list);
    146e:	f9 01       	movw	r30, r18
    1470:	a5 91       	lpm	r26, Z+
    1472:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    1474:	4a 17       	cp	r20, r26
    1476:	5b 07       	cpc	r21, r27
    1478:	09 f0       	breq	.+2      	; 0x147c <__vector_11+0xda>
    147a:	a7 c0       	rjmp	.+334    	; 0x15ca <__vector_11+0x228>
				desc_val = pgm_read_word(list);
    147c:	f9 01       	movw	r30, r18
    147e:	32 96       	adiw	r30, 0x02	; 2
    1480:	a5 91       	lpm	r26, Z+
    1482:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    1484:	6a 17       	cp	r22, r26
    1486:	7b 07       	cpc	r23, r27
    1488:	09 f0       	breq	.+2      	; 0x148c <__vector_11+0xea>
    148a:	9f c0       	rjmp	.+318    	; 0x15ca <__vector_11+0x228>
				list += 2;
    148c:	f9 01       	movw	r30, r18
    148e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1490:	65 91       	lpm	r22, Z+
    1492:	74 91       	lpm	r23, Z
				list += 2;
    1494:	2a 5f       	subi	r18, 0xFA	; 250
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_length = pgm_read_byte(list);
    1498:	f9 01       	movw	r30, r18
    149a:	24 91       	lpm	r18, Z
                wLength |= (UEDATX << 8);
    149c:	9c 2f       	mov	r25, r28
			len = (wLength < 256) ? wLength : 255;
    149e:	8f 3f       	cpi	r24, 0xFF	; 255
    14a0:	91 05       	cpc	r25, r1
    14a2:	19 f0       	breq	.+6      	; 0x14aa <__vector_11+0x108>
    14a4:	10 f0       	brcs	.+4      	; 0x14aa <__vector_11+0x108>
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	a8 2f       	mov	r26, r24
    14ac:	28 17       	cp	r18, r24
    14ae:	08 f4       	brcc	.+2      	; 0x14b2 <__vector_11+0x110>
    14b0:	a2 2f       	mov	r26, r18
	UEINTX = ~(1<<TXINI);
    14b2:	be ef       	ldi	r27, 0xFE	; 254
					i = UEINTX;
    14b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    14b8:	98 2f       	mov	r25, r24
    14ba:	95 70       	andi	r25, 0x05	; 5
    14bc:	d9 f3       	breq	.-10     	; 0x14b4 <__vector_11+0x112>
				if (i & (1<<RXOUTI)) return;	// abort
    14be:	82 fd       	sbrc	r24, 2
    14c0:	bf cf       	rjmp	.-130    	; 0x1440 <__vector_11+0x9e>
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    14c2:	9a 2f       	mov	r25, r26
    14c4:	a1 31       	cpi	r26, 0x11	; 17
    14c6:	08 f0       	brcs	.+2      	; 0x14ca <__vector_11+0x128>
    14c8:	90 e1       	ldi	r25, 0x10	; 16
				for (i = n; i; i--) {
    14ca:	aa 23       	and	r26, r26
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <__vector_11+0x12e>
    14ce:	79 c0       	rjmp	.+242    	; 0x15c2 <__vector_11+0x220>
    14d0:	fb 01       	movw	r30, r22
    14d2:	4f ef       	ldi	r20, 0xFF	; 255
    14d4:	49 0f       	add	r20, r25
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	9b 01       	movw	r18, r22
    14da:	2f 5f       	subi	r18, 0xFF	; 255
    14dc:	3f 4f       	sbci	r19, 0xFF	; 255
    14de:	24 0f       	add	r18, r20
    14e0:	35 1f       	adc	r19, r21
					UEDATX = pgm_read_byte(desc_addr++);
    14e2:	84 91       	lpm	r24, Z
    14e4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    14e8:	31 96       	adiw	r30, 0x01	; 1
				for (i = n; i; i--) {
    14ea:	e2 17       	cp	r30, r18
    14ec:	f3 07       	cpc	r31, r19
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <__vector_11+0x140>
    14f0:	4f 5f       	subi	r20, 0xFF	; 255
    14f2:	5f 4f       	sbci	r21, 0xFF	; 255
    14f4:	64 0f       	add	r22, r20
    14f6:	75 1f       	adc	r23, r21
				len -= n;
    14f8:	8a 2f       	mov	r24, r26
    14fa:	89 1b       	sub	r24, r25
	UEINTX = ~(1<<TXINI);
    14fc:	b0 93 e8 00 	sts	0x00E8, r27	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			} while (len || n == ENDPOINT0_SIZE);
    1500:	81 11       	cpse	r24, r1
    1502:	03 c0       	rjmp	.+6      	; 0x150a <__vector_11+0x168>
    1504:	a0 31       	cpi	r26, 0x10	; 16
    1506:	08 f4       	brcc	.+2      	; 0x150a <__vector_11+0x168>
    1508:	9b cf       	rjmp	.-202    	; 0x1440 <__vector_11+0x9e>
{
    150a:	a8 2f       	mov	r26, r24
    150c:	d3 cf       	rjmp	.-90     	; 0x14b4 <__vector_11+0x112>
	while (!(UEINTX & (1<<TXINI))) ;
    150e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1512:	80 ff       	sbrs	r24, 0
    1514:	fc cf       	rjmp	.-8      	; 0x150e <__vector_11+0x16c>
			if (bmRequestType == 0x82) {
    1516:	32 38       	cpi	r19, 0x82	; 130
    1518:	09 f4       	brne	.+2      	; 0x151c <__vector_11+0x17a>
    151a:	9f c0       	rjmp	.+318    	; 0x165a <__vector_11+0x2b8>
			UEDATX = i;
    151c:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    1520:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	UEINTX = ~(1<<TXINI);
    1524:	8e ef       	ldi	r24, 0xFE	; 254
    1526:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			return;
    152a:	8a cf       	rjmp	.-236    	; 0x1440 <__vector_11+0x9e>
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    152c:	31 11       	cpse	r19, r1
    152e:	85 cf       	rjmp	.-246    	; 0x143a <__vector_11+0x98>
			usb_configuration = wValue;
    1530:	40 93 99 02 	sts	0x0299, r20	; 0x800299 <usb_configuration>
			cdc_line_rtsdtr = 0;
    1534:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <cdc_line_rtsdtr>
			transmit_flush_timer = 0;
    1538:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <transmit_flush_timer>
	UEINTX = ~(1<<TXINI);
    153c:	8e ef       	ldi	r24, 0xFE	; 254
    153e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=1; i<5; i++) {
    1542:	21 e0       	ldi	r18, 0x01	; 1
			cfg = endpoint_config_table;
    1544:	8b e6       	ldi	r24, 0x6B	; 107
    1546:	91 e0       	ldi	r25, 0x01	; 1
				UENUM = i;
    1548:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				en = pgm_read_byte(cfg++);
    154c:	ac 01       	movw	r20, r24
    154e:	4f 5f       	subi	r20, 0xFF	; 255
    1550:	5f 4f       	sbci	r21, 0xFF	; 255
    1552:	fc 01       	movw	r30, r24
    1554:	34 91       	lpm	r19, Z
				UECONX = en;
    1556:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    155a:	33 23       	and	r19, r19
    155c:	09 f4       	brne	.+2      	; 0x1560 <__vector_11+0x1be>
    155e:	87 c0       	rjmp	.+270    	; 0x166e <__vector_11+0x2cc>
					UECFG0X = pgm_read_byte(cfg++);
    1560:	fa 01       	movw	r30, r20
    1562:	44 91       	lpm	r20, Z
    1564:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					UECFG1X = pgm_read_byte(cfg++);
    1568:	31 96       	adiw	r30, 0x01	; 1
    156a:	e4 91       	lpm	r30, Z
    156c:	03 96       	adiw	r24, 0x03	; 3
    156e:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			for (i=1; i<5; i++) {
    1572:	2f 5f       	subi	r18, 0xFF	; 255
    1574:	25 30       	cpi	r18, 0x05	; 5
    1576:	41 f7       	brne	.-48     	; 0x1548 <__vector_11+0x1a6>
        		UERST = 0x1E;
    1578:	8e e1       	ldi	r24, 0x1E	; 30
    157a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
        		UERST = 0;
    157e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			return;
    1582:	5e cf       	rjmp	.-324    	; 0x1440 <__vector_11+0x9e>
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1584:	30 38       	cpi	r19, 0x80	; 128
    1586:	09 f0       	breq	.+2      	; 0x158a <__vector_11+0x1e8>
    1588:	58 cf       	rjmp	.-336    	; 0x143a <__vector_11+0x98>
	while (!(UEINTX & (1<<TXINI))) ;
    158a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    158e:	80 ff       	sbrs	r24, 0
    1590:	fc cf       	rjmp	.-8      	; 0x158a <__vector_11+0x1e8>
			UEDATX = usb_configuration;
    1592:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <usb_configuration>
    1596:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	UEINTX = ~(1<<TXINI);
    159a:	8e ef       	ldi	r24, 0xFE	; 254
    159c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			return;
    15a0:	4f cf       	rjmp	.-354    	; 0x1440 <__vector_11+0x9e>
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    15a2:	31 3a       	cpi	r19, 0xA1	; 161
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <__vector_11+0x206>
    15a6:	49 cf       	rjmp	.-366    	; 0x143a <__vector_11+0x98>
	while (!(UEINTX & (1<<TXINI))) ;
    15a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15ac:	80 ff       	sbrs	r24, 0
    15ae:	fc cf       	rjmp	.-8      	; 0x15a8 <__vector_11+0x206>
			p = cdc_line_coding;
    15b0:	e8 e1       	ldi	r30, 0x18	; 24
    15b2:	f1 e0       	ldi	r31, 0x01	; 1
				UEDATX = *p++;
    15b4:	81 91       	ld	r24, Z+
    15b6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			for (i=0; i<7; i++) {
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	ef 31       	cpi	r30, 0x1F	; 31
    15be:	f8 07       	cpc	r31, r24
    15c0:	c9 f7       	brne	.-14     	; 0x15b4 <__vector_11+0x212>
	UEINTX = ~(1<<TXINI);
    15c2:	8e ef       	ldi	r24, 0xFE	; 254
    15c4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15c8:	3b cf       	rjmp	.-394    	; 0x1440 <__vector_11+0x9e>
				if (i >= NUM_DESC_LIST) {
    15ca:	29 5f       	subi	r18, 0xF9	; 249
    15cc:	3f 4f       	sbci	r19, 0xFF	; 255
    15ce:	02 17       	cp	r16, r18
    15d0:	13 07       	cpc	r17, r19
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <__vector_11+0x234>
    15d4:	4c cf       	rjmp	.-360    	; 0x146e <__vector_11+0xcc>
    15d6:	31 cf       	rjmp	.-414    	; 0x143a <__vector_11+0x98>
	UEINTX = ~(1<<TXINI);
    15d8:	8e ef       	ldi	r24, 0xFE	; 254
    15da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(UEINTX & (1<<TXINI))) ;
    15de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15e2:	80 ff       	sbrs	r24, 0
    15e4:	fc cf       	rjmp	.-8      	; 0x15de <__vector_11+0x23c>
			UDADDR = wValue | (1<<ADDEN);
    15e6:	40 68       	ori	r20, 0x80	; 128
    15e8:	40 93 e3 00 	sts	0x00E3, r20	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    15ec:	29 cf       	rjmp	.-430    	; 0x1440 <__vector_11+0x9e>
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    15ee:	31 32       	cpi	r19, 0x21	; 33
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <__vector_11+0x252>
    15f2:	23 cf       	rjmp	.-442    	; 0x143a <__vector_11+0x98>
	while (!(UEINTX & (1<<RXOUTI))) ;
    15f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15f8:	82 ff       	sbrs	r24, 2
    15fa:	fc cf       	rjmp	.-8      	; 0x15f4 <__vector_11+0x252>
			p = cdc_line_coding;
    15fc:	e8 e1       	ldi	r30, 0x18	; 24
    15fe:	f1 e0       	ldi	r31, 0x01	; 1
				*p++ = UEDATX;
    1600:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1604:	81 93       	st	Z+, r24
			for (i=0; i<7; i++) {
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	ef 31       	cpi	r30, 0x1F	; 31
    160a:	f8 07       	cpc	r31, r24
    160c:	c9 f7       	brne	.-14     	; 0x1600 <__vector_11+0x25e>
	UEINTX = ~(1<<RXOUTI);
    160e:	8b ef       	ldi	r24, 0xFB	; 251
    1610:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	UEINTX = ~(1<<TXINI);
    1614:	8e ef       	ldi	r24, 0xFE	; 254
    1616:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			return;
    161a:	12 cf       	rjmp	.-476    	; 0x1440 <__vector_11+0x9e>
		  && bmRequestType == 0x02 && wValue == 0) {
    161c:	45 2b       	or	r20, r21
    161e:	09 f0       	breq	.+2      	; 0x1622 <__vector_11+0x280>
    1620:	0c cf       	rjmp	.-488    	; 0x143a <__vector_11+0x98>
			i = wIndex & 0x7F;
    1622:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1624:	8f ef       	ldi	r24, 0xFF	; 255
    1626:	86 0f       	add	r24, r22
    1628:	84 30       	cpi	r24, 0x04	; 4
    162a:	08 f0       	brcs	.+2      	; 0x162e <__vector_11+0x28c>
    162c:	06 cf       	rjmp	.-500    	; 0x143a <__vector_11+0x98>
	UEINTX = ~(1<<TXINI);
    162e:	8e ef       	ldi	r24, 0xFE	; 254
    1630:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UENUM = i;
    1634:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    1638:	93 30       	cpi	r25, 0x03	; 3
    163a:	09 f4       	brne	.+2      	; 0x163e <__vector_11+0x29c>
    163c:	fe ce       	rjmp	.-516    	; 0x143a <__vector_11+0x98>
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    163e:	89 e1       	ldi	r24, 0x19	; 25
    1640:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	01 c0       	rjmp	.+2      	; 0x164c <__vector_11+0x2aa>
    164a:	88 0f       	add	r24, r24
    164c:	6a 95       	dec	r22
    164e:	ea f7       	brpl	.-6      	; 0x164a <__vector_11+0x2a8>
    1650:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    1654:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    1658:	f3 ce       	rjmp	.-538    	; 0x1440 <__vector_11+0x9e>
				UENUM = wIndex;
    165a:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    165e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1662:	95 fb       	bst	r25, 5
    1664:	99 27       	eor	r25, r25
    1666:	90 f9       	bld	r25, 0
				UENUM = 0;
    1668:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    166c:	57 cf       	rjmp	.-338    	; 0x151c <__vector_11+0x17a>
				en = pgm_read_byte(cfg++);
    166e:	ca 01       	movw	r24, r20
    1670:	80 cf       	rjmp	.-256    	; 0x1572 <__vector_11+0x1d0>
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1672:	31 32       	cpi	r19, 0x21	; 33
    1674:	09 f0       	breq	.+2      	; 0x1678 <__vector_11+0x2d6>
    1676:	e1 ce       	rjmp	.-574    	; 0x143a <__vector_11+0x98>
			cdc_line_rtsdtr = wValue;
    1678:	40 93 96 02 	sts	0x0296, r20	; 0x800296 <cdc_line_rtsdtr>
	while (!(UEINTX & (1<<TXINI))) ;
    167c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1680:	80 ff       	sbrs	r24, 0
    1682:	fc cf       	rjmp	.-8      	; 0x167c <__vector_11+0x2da>
    1684:	9e cf       	rjmp	.-196    	; 0x15c2 <__vector_11+0x220>

00001686 <__udivmodsi4>:
    1686:	a1 e2       	ldi	r26, 0x21	; 33
    1688:	1a 2e       	mov	r1, r26
    168a:	aa 1b       	sub	r26, r26
    168c:	bb 1b       	sub	r27, r27
    168e:	fd 01       	movw	r30, r26
    1690:	0d c0       	rjmp	.+26     	; 0x16ac <__udivmodsi4_ep>

00001692 <__udivmodsi4_loop>:
    1692:	aa 1f       	adc	r26, r26
    1694:	bb 1f       	adc	r27, r27
    1696:	ee 1f       	adc	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	a2 17       	cp	r26, r18
    169c:	b3 07       	cpc	r27, r19
    169e:	e4 07       	cpc	r30, r20
    16a0:	f5 07       	cpc	r31, r21
    16a2:	20 f0       	brcs	.+8      	; 0x16ac <__udivmodsi4_ep>
    16a4:	a2 1b       	sub	r26, r18
    16a6:	b3 0b       	sbc	r27, r19
    16a8:	e4 0b       	sbc	r30, r20
    16aa:	f5 0b       	sbc	r31, r21

000016ac <__udivmodsi4_ep>:
    16ac:	66 1f       	adc	r22, r22
    16ae:	77 1f       	adc	r23, r23
    16b0:	88 1f       	adc	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	1a 94       	dec	r1
    16b6:	69 f7       	brne	.-38     	; 0x1692 <__udivmodsi4_loop>
    16b8:	60 95       	com	r22
    16ba:	70 95       	com	r23
    16bc:	80 95       	com	r24
    16be:	90 95       	com	r25
    16c0:	9b 01       	movw	r18, r22
    16c2:	ac 01       	movw	r20, r24
    16c4:	bd 01       	movw	r22, r26
    16c6:	cf 01       	movw	r24, r30
    16c8:	08 95       	ret

000016ca <__muluhisi3>:
    16ca:	09 d0       	rcall	.+18     	; 0x16de <__umulhisi3>
    16cc:	a5 9f       	mul	r26, r21
    16ce:	90 0d       	add	r25, r0
    16d0:	b4 9f       	mul	r27, r20
    16d2:	90 0d       	add	r25, r0
    16d4:	a4 9f       	mul	r26, r20
    16d6:	80 0d       	add	r24, r0
    16d8:	91 1d       	adc	r25, r1
    16da:	11 24       	eor	r1, r1
    16dc:	08 95       	ret

000016de <__umulhisi3>:
    16de:	a2 9f       	mul	r26, r18
    16e0:	b0 01       	movw	r22, r0
    16e2:	b3 9f       	mul	r27, r19
    16e4:	c0 01       	movw	r24, r0
    16e6:	a3 9f       	mul	r26, r19
    16e8:	70 0d       	add	r23, r0
    16ea:	81 1d       	adc	r24, r1
    16ec:	11 24       	eor	r1, r1
    16ee:	91 1d       	adc	r25, r1
    16f0:	b2 9f       	mul	r27, r18
    16f2:	70 0d       	add	r23, r0
    16f4:	81 1d       	adc	r24, r1
    16f6:	11 24       	eor	r1, r1
    16f8:	91 1d       	adc	r25, r1
    16fa:	08 95       	ret

000016fc <printf>:
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	a0 e0       	ldi	r26, 0x00	; 0
    1700:	e3 e8       	ldi	r30, 0x83	; 131
    1702:	fb e0       	ldi	r31, 0x0B	; 11
    1704:	7e c2       	rjmp	.+1276   	; 0x1c02 <__prologue_saves__+0x20>
    1706:	ae 01       	movw	r20, r28
    1708:	4b 5f       	subi	r20, 0xFB	; 251
    170a:	5f 4f       	sbci	r21, 0xFF	; 255
    170c:	fa 01       	movw	r30, r20
    170e:	61 91       	ld	r22, Z+
    1710:	71 91       	ld	r23, Z+
    1712:	af 01       	movw	r20, r30
    1714:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <__iob+0x2>
    1718:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <__iob+0x3>
    171c:	02 d0       	rcall	.+4      	; 0x1722 <vfprintf>
    171e:	e2 e0       	ldi	r30, 0x02	; 2
    1720:	8c c2       	rjmp	.+1304   	; 0x1c3a <__epilogue_restores__+0x20>

00001722 <vfprintf>:
    1722:	ab e0       	ldi	r26, 0x0B	; 11
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e6 e9       	ldi	r30, 0x96	; 150
    1728:	fb e0       	ldi	r31, 0x0B	; 11
    172a:	5b c2       	rjmp	.+1206   	; 0x1be2 <__prologue_saves__>
    172c:	7c 01       	movw	r14, r24
    172e:	3b 01       	movw	r6, r22
    1730:	8a 01       	movw	r16, r20
    1732:	fc 01       	movw	r30, r24
    1734:	17 82       	std	Z+7, r1	; 0x07
    1736:	16 82       	std	Z+6, r1	; 0x06
    1738:	83 81       	ldd	r24, Z+3	; 0x03
    173a:	81 ff       	sbrs	r24, 1
    173c:	ab c1       	rjmp	.+854    	; 0x1a94 <vfprintf+0x372>
    173e:	9a e0       	ldi	r25, 0x0A	; 10
    1740:	29 2e       	mov	r2, r25
    1742:	ce 01       	movw	r24, r28
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	5c 01       	movw	r10, r24
    1748:	f7 01       	movw	r30, r14
    174a:	93 81       	ldd	r25, Z+3	; 0x03
    174c:	f3 01       	movw	r30, r6
    174e:	93 fd       	sbrc	r25, 3
    1750:	85 91       	lpm	r24, Z+
    1752:	93 ff       	sbrs	r25, 3
    1754:	81 91       	ld	r24, Z+
    1756:	3f 01       	movw	r6, r30
    1758:	88 23       	and	r24, r24
    175a:	09 f4       	brne	.+2      	; 0x175e <vfprintf+0x3c>
    175c:	3c c1       	rjmp	.+632    	; 0x19d6 <vfprintf+0x2b4>
    175e:	85 32       	cpi	r24, 0x25	; 37
    1760:	39 f4       	brne	.+14     	; 0x1770 <vfprintf+0x4e>
    1762:	93 fd       	sbrc	r25, 3
    1764:	85 91       	lpm	r24, Z+
    1766:	93 ff       	sbrs	r25, 3
    1768:	81 91       	ld	r24, Z+
    176a:	3f 01       	movw	r6, r30
    176c:	85 32       	cpi	r24, 0x25	; 37
    176e:	21 f4       	brne	.+8      	; 0x1778 <vfprintf+0x56>
    1770:	b7 01       	movw	r22, r14
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a8 d1       	rcall	.+848    	; 0x1ac6 <fputc>
    1776:	e8 cf       	rjmp	.-48     	; 0x1748 <vfprintf+0x26>
    1778:	91 2c       	mov	r9, r1
    177a:	41 2c       	mov	r4, r1
    177c:	51 2c       	mov	r5, r1
    177e:	ff e1       	ldi	r31, 0x1F	; 31
    1780:	f5 15       	cp	r31, r5
    1782:	38 f0       	brcs	.+14     	; 0x1792 <vfprintf+0x70>
    1784:	8b 32       	cpi	r24, 0x2B	; 43
    1786:	09 f1       	breq	.+66     	; 0x17ca <vfprintf+0xa8>
    1788:	88 f4       	brcc	.+34     	; 0x17ac <vfprintf+0x8a>
    178a:	80 32       	cpi	r24, 0x20	; 32
    178c:	01 f1       	breq	.+64     	; 0x17ce <vfprintf+0xac>
    178e:	83 32       	cpi	r24, 0x23	; 35
    1790:	21 f1       	breq	.+72     	; 0x17da <vfprintf+0xb8>
    1792:	57 fc       	sbrc	r5, 7
    1794:	3a c0       	rjmp	.+116    	; 0x180a <vfprintf+0xe8>
    1796:	20 ed       	ldi	r18, 0xD0	; 208
    1798:	28 0f       	add	r18, r24
    179a:	2a 30       	cpi	r18, 0x0A	; 10
    179c:	40 f5       	brcc	.+80     	; 0x17ee <vfprintf+0xcc>
    179e:	56 fe       	sbrs	r5, 6
    17a0:	1f c0       	rjmp	.+62     	; 0x17e0 <vfprintf+0xbe>
    17a2:	92 9c       	mul	r9, r2
    17a4:	20 0d       	add	r18, r0
    17a6:	11 24       	eor	r1, r1
    17a8:	92 2e       	mov	r9, r18
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <vfprintf+0x96>
    17ac:	8d 32       	cpi	r24, 0x2D	; 45
    17ae:	91 f0       	breq	.+36     	; 0x17d4 <vfprintf+0xb2>
    17b0:	80 33       	cpi	r24, 0x30	; 48
    17b2:	79 f7       	brne	.-34     	; 0x1792 <vfprintf+0x70>
    17b4:	68 94       	set
    17b6:	50 f8       	bld	r5, 0
    17b8:	f3 01       	movw	r30, r6
    17ba:	93 fd       	sbrc	r25, 3
    17bc:	85 91       	lpm	r24, Z+
    17be:	93 ff       	sbrs	r25, 3
    17c0:	81 91       	ld	r24, Z+
    17c2:	3f 01       	movw	r6, r30
    17c4:	81 11       	cpse	r24, r1
    17c6:	db cf       	rjmp	.-74     	; 0x177e <vfprintf+0x5c>
    17c8:	20 c0       	rjmp	.+64     	; 0x180a <vfprintf+0xe8>
    17ca:	68 94       	set
    17cc:	51 f8       	bld	r5, 1
    17ce:	68 94       	set
    17d0:	52 f8       	bld	r5, 2
    17d2:	f2 cf       	rjmp	.-28     	; 0x17b8 <vfprintf+0x96>
    17d4:	68 94       	set
    17d6:	53 f8       	bld	r5, 3
    17d8:	ef cf       	rjmp	.-34     	; 0x17b8 <vfprintf+0x96>
    17da:	68 94       	set
    17dc:	54 f8       	bld	r5, 4
    17de:	ec cf       	rjmp	.-40     	; 0x17b8 <vfprintf+0x96>
    17e0:	42 9c       	mul	r4, r2
    17e2:	20 0d       	add	r18, r0
    17e4:	11 24       	eor	r1, r1
    17e6:	42 2e       	mov	r4, r18
    17e8:	68 94       	set
    17ea:	55 f8       	bld	r5, 5
    17ec:	e5 cf       	rjmp	.-54     	; 0x17b8 <vfprintf+0x96>
    17ee:	8e 32       	cpi	r24, 0x2E	; 46
    17f0:	29 f4       	brne	.+10     	; 0x17fc <vfprintf+0xda>
    17f2:	56 fc       	sbrc	r5, 6
    17f4:	f0 c0       	rjmp	.+480    	; 0x19d6 <vfprintf+0x2b4>
    17f6:	68 94       	set
    17f8:	56 f8       	bld	r5, 6
    17fa:	de cf       	rjmp	.-68     	; 0x17b8 <vfprintf+0x96>
    17fc:	8c 36       	cpi	r24, 0x6C	; 108
    17fe:	19 f4       	brne	.+6      	; 0x1806 <vfprintf+0xe4>
    1800:	68 94       	set
    1802:	57 f8       	bld	r5, 7
    1804:	d9 cf       	rjmp	.-78     	; 0x17b8 <vfprintf+0x96>
    1806:	88 36       	cpi	r24, 0x68	; 104
    1808:	b9 f2       	breq	.-82     	; 0x17b8 <vfprintf+0x96>
    180a:	98 2f       	mov	r25, r24
    180c:	9f 7d       	andi	r25, 0xDF	; 223
    180e:	95 54       	subi	r25, 0x45	; 69
    1810:	93 30       	cpi	r25, 0x03	; 3
    1812:	b8 f0       	brcs	.+46     	; 0x1842 <vfprintf+0x120>
    1814:	83 36       	cpi	r24, 0x63	; 99
    1816:	91 f1       	breq	.+100    	; 0x187c <vfprintf+0x15a>
    1818:	83 37       	cpi	r24, 0x73	; 115
    181a:	b1 f1       	breq	.+108    	; 0x1888 <vfprintf+0x166>
    181c:	83 35       	cpi	r24, 0x53	; 83
    181e:	09 f0       	breq	.+2      	; 0x1822 <vfprintf+0x100>
    1820:	56 c0       	rjmp	.+172    	; 0x18ce <vfprintf+0x1ac>
    1822:	f8 01       	movw	r30, r16
    1824:	c1 90       	ld	r12, Z+
    1826:	d1 90       	ld	r13, Z+
    1828:	8f 01       	movw	r16, r30
    182a:	69 2d       	mov	r22, r9
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	56 fc       	sbrc	r5, 6
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <vfprintf+0x114>
    1832:	6f ef       	ldi	r22, 0xFF	; 255
    1834:	7f ef       	ldi	r23, 0xFF	; 255
    1836:	c6 01       	movw	r24, r12
    1838:	30 d1       	rcall	.+608    	; 0x1a9a <strnlen_P>
    183a:	4c 01       	movw	r8, r24
    183c:	68 94       	set
    183e:	57 f8       	bld	r5, 7
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <vfprintf+0x134>
    1842:	0c 5f       	subi	r16, 0xFC	; 252
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	2f e3       	ldi	r18, 0x3F	; 63
    1848:	29 83       	std	Y+1, r18	; 0x01
    184a:	88 24       	eor	r8, r8
    184c:	83 94       	inc	r8
    184e:	91 2c       	mov	r9, r1
    1850:	65 01       	movw	r12, r10
    1852:	e8 94       	clt
    1854:	57 f8       	bld	r5, 7
    1856:	53 fc       	sbrc	r5, 3
    1858:	04 c0       	rjmp	.+8      	; 0x1862 <vfprintf+0x140>
    185a:	48 14       	cp	r4, r8
    185c:	19 04       	cpc	r1, r9
    185e:	09 f0       	breq	.+2      	; 0x1862 <vfprintf+0x140>
    1860:	08 f5       	brcc	.+66     	; 0x18a4 <vfprintf+0x182>
    1862:	34 2c       	mov	r3, r4
    1864:	81 14       	cp	r8, r1
    1866:	91 04       	cpc	r9, r1
    1868:	19 f5       	brne	.+70     	; 0x18b0 <vfprintf+0x18e>
    186a:	33 20       	and	r3, r3
    186c:	09 f4       	brne	.+2      	; 0x1870 <vfprintf+0x14e>
    186e:	6c cf       	rjmp	.-296    	; 0x1748 <vfprintf+0x26>
    1870:	b7 01       	movw	r22, r14
    1872:	80 e2       	ldi	r24, 0x20	; 32
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	27 d1       	rcall	.+590    	; 0x1ac6 <fputc>
    1878:	3a 94       	dec	r3
    187a:	f7 cf       	rjmp	.-18     	; 0x186a <vfprintf+0x148>
    187c:	f8 01       	movw	r30, r16
    187e:	80 81       	ld	r24, Z
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	0e 5f       	subi	r16, 0xFE	; 254
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	e1 cf       	rjmp	.-62     	; 0x184a <vfprintf+0x128>
    1888:	f8 01       	movw	r30, r16
    188a:	c1 90       	ld	r12, Z+
    188c:	d1 90       	ld	r13, Z+
    188e:	8f 01       	movw	r16, r30
    1890:	69 2d       	mov	r22, r9
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	56 fc       	sbrc	r5, 6
    1896:	02 c0       	rjmp	.+4      	; 0x189c <vfprintf+0x17a>
    1898:	6f ef       	ldi	r22, 0xFF	; 255
    189a:	7f ef       	ldi	r23, 0xFF	; 255
    189c:	c6 01       	movw	r24, r12
    189e:	08 d1       	rcall	.+528    	; 0x1ab0 <strnlen>
    18a0:	4c 01       	movw	r8, r24
    18a2:	d7 cf       	rjmp	.-82     	; 0x1852 <vfprintf+0x130>
    18a4:	b7 01       	movw	r22, r14
    18a6:	80 e2       	ldi	r24, 0x20	; 32
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0d d1       	rcall	.+538    	; 0x1ac6 <fputc>
    18ac:	4a 94       	dec	r4
    18ae:	d5 cf       	rjmp	.-86     	; 0x185a <vfprintf+0x138>
    18b0:	f6 01       	movw	r30, r12
    18b2:	57 fc       	sbrc	r5, 7
    18b4:	85 91       	lpm	r24, Z+
    18b6:	57 fe       	sbrs	r5, 7
    18b8:	81 91       	ld	r24, Z+
    18ba:	6f 01       	movw	r12, r30
    18bc:	b7 01       	movw	r22, r14
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 d1       	rcall	.+516    	; 0x1ac6 <fputc>
    18c2:	31 10       	cpse	r3, r1
    18c4:	3a 94       	dec	r3
    18c6:	f1 e0       	ldi	r31, 0x01	; 1
    18c8:	8f 1a       	sub	r8, r31
    18ca:	91 08       	sbc	r9, r1
    18cc:	cb cf       	rjmp	.-106    	; 0x1864 <vfprintf+0x142>
    18ce:	84 36       	cpi	r24, 0x64	; 100
    18d0:	19 f0       	breq	.+6      	; 0x18d8 <vfprintf+0x1b6>
    18d2:	89 36       	cpi	r24, 0x69	; 105
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <vfprintf+0x1b6>
    18d6:	70 c0       	rjmp	.+224    	; 0x19b8 <vfprintf+0x296>
    18d8:	f8 01       	movw	r30, r16
    18da:	57 fe       	sbrs	r5, 7
    18dc:	66 c0       	rjmp	.+204    	; 0x19aa <vfprintf+0x288>
    18de:	61 91       	ld	r22, Z+
    18e0:	71 91       	ld	r23, Z+
    18e2:	81 91       	ld	r24, Z+
    18e4:	91 91       	ld	r25, Z+
    18e6:	8f 01       	movw	r16, r30
    18e8:	25 2d       	mov	r18, r5
    18ea:	2f 76       	andi	r18, 0x6F	; 111
    18ec:	d2 2e       	mov	r13, r18
    18ee:	97 ff       	sbrs	r25, 7
    18f0:	09 c0       	rjmp	.+18     	; 0x1904 <vfprintf+0x1e2>
    18f2:	90 95       	com	r25
    18f4:	80 95       	com	r24
    18f6:	70 95       	com	r23
    18f8:	61 95       	neg	r22
    18fa:	7f 4f       	sbci	r23, 0xFF	; 255
    18fc:	8f 4f       	sbci	r24, 0xFF	; 255
    18fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1900:	68 94       	set
    1902:	d7 f8       	bld	r13, 7
    1904:	2a e0       	ldi	r18, 0x0A	; 10
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	a5 01       	movw	r20, r10
    190a:	0d d1       	rcall	.+538    	; 0x1b26 <__ultoa_invert>
    190c:	c8 2e       	mov	r12, r24
    190e:	ca 18       	sub	r12, r10
    1910:	8c 2c       	mov	r8, r12
    1912:	5d 2c       	mov	r5, r13
    1914:	d6 fe       	sbrs	r13, 6
    1916:	0c c0       	rjmp	.+24     	; 0x1930 <vfprintf+0x20e>
    1918:	e8 94       	clt
    191a:	50 f8       	bld	r5, 0
    191c:	c9 14       	cp	r12, r9
    191e:	40 f4       	brcc	.+16     	; 0x1930 <vfprintf+0x20e>
    1920:	d4 fe       	sbrs	r13, 4
    1922:	05 c0       	rjmp	.+10     	; 0x192e <vfprintf+0x20c>
    1924:	d2 fc       	sbrc	r13, 2
    1926:	03 c0       	rjmp	.+6      	; 0x192e <vfprintf+0x20c>
    1928:	fd 2d       	mov	r31, r13
    192a:	fe 7e       	andi	r31, 0xEE	; 238
    192c:	5f 2e       	mov	r5, r31
    192e:	89 2c       	mov	r8, r9
    1930:	54 fe       	sbrs	r5, 4
    1932:	8a c0       	rjmp	.+276    	; 0x1a48 <vfprintf+0x326>
    1934:	fe 01       	movw	r30, r28
    1936:	ec 0d       	add	r30, r12
    1938:	f1 1d       	adc	r31, r1
    193a:	80 81       	ld	r24, Z
    193c:	80 33       	cpi	r24, 0x30	; 48
    193e:	09 f0       	breq	.+2      	; 0x1942 <vfprintf+0x220>
    1940:	7c c0       	rjmp	.+248    	; 0x1a3a <vfprintf+0x318>
    1942:	25 2d       	mov	r18, r5
    1944:	29 7e       	andi	r18, 0xE9	; 233
    1946:	52 2e       	mov	r5, r18
    1948:	85 2d       	mov	r24, r5
    194a:	88 70       	andi	r24, 0x08	; 8
    194c:	38 2e       	mov	r3, r24
    194e:	53 fc       	sbrc	r5, 3
    1950:	89 c0       	rjmp	.+274    	; 0x1a64 <vfprintf+0x342>
    1952:	50 fe       	sbrs	r5, 0
    1954:	83 c0       	rjmp	.+262    	; 0x1a5c <vfprintf+0x33a>
    1956:	9c 2c       	mov	r9, r12
    1958:	84 14       	cp	r8, r4
    195a:	18 f4       	brcc	.+6      	; 0x1962 <vfprintf+0x240>
    195c:	4c 0c       	add	r4, r12
    195e:	94 2c       	mov	r9, r4
    1960:	98 18       	sub	r9, r8
    1962:	54 fe       	sbrs	r5, 4
    1964:	85 c0       	rjmp	.+266    	; 0x1a70 <vfprintf+0x34e>
    1966:	b7 01       	movw	r22, r14
    1968:	80 e3       	ldi	r24, 0x30	; 48
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	ac d0       	rcall	.+344    	; 0x1ac6 <fputc>
    196e:	52 fe       	sbrs	r5, 2
    1970:	08 c0       	rjmp	.+16     	; 0x1982 <vfprintf+0x260>
    1972:	88 e7       	ldi	r24, 0x78	; 120
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	51 fe       	sbrs	r5, 1
    1978:	02 c0       	rjmp	.+4      	; 0x197e <vfprintf+0x25c>
    197a:	88 e5       	ldi	r24, 0x58	; 88
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	b7 01       	movw	r22, r14
    1980:	a2 d0       	rcall	.+324    	; 0x1ac6 <fputc>
    1982:	c9 14       	cp	r12, r9
    1984:	08 f4       	brcc	.+2      	; 0x1988 <vfprintf+0x266>
    1986:	80 c0       	rjmp	.+256    	; 0x1a88 <vfprintf+0x366>
    1988:	ca 94       	dec	r12
    198a:	d1 2c       	mov	r13, r1
    198c:	9f ef       	ldi	r25, 0xFF	; 255
    198e:	c9 1a       	sub	r12, r25
    1990:	d9 0a       	sbc	r13, r25
    1992:	ca 0c       	add	r12, r10
    1994:	db 1c       	adc	r13, r11
    1996:	f6 01       	movw	r30, r12
    1998:	82 91       	ld	r24, -Z
    199a:	6f 01       	movw	r12, r30
    199c:	b7 01       	movw	r22, r14
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	92 d0       	rcall	.+292    	; 0x1ac6 <fputc>
    19a2:	ac 14       	cp	r10, r12
    19a4:	bd 04       	cpc	r11, r13
    19a6:	b9 f7       	brne	.-18     	; 0x1996 <vfprintf+0x274>
    19a8:	60 cf       	rjmp	.-320    	; 0x186a <vfprintf+0x148>
    19aa:	61 91       	ld	r22, Z+
    19ac:	71 91       	ld	r23, Z+
    19ae:	07 2e       	mov	r0, r23
    19b0:	00 0c       	add	r0, r0
    19b2:	88 0b       	sbc	r24, r24
    19b4:	99 0b       	sbc	r25, r25
    19b6:	97 cf       	rjmp	.-210    	; 0x18e6 <vfprintf+0x1c4>
    19b8:	d5 2c       	mov	r13, r5
    19ba:	e8 94       	clt
    19bc:	d4 f8       	bld	r13, 4
    19be:	2a e0       	ldi	r18, 0x0A	; 10
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	85 37       	cpi	r24, 0x75	; 117
    19c4:	31 f1       	breq	.+76     	; 0x1a12 <vfprintf+0x2f0>
    19c6:	95 2d       	mov	r25, r5
    19c8:	99 7f       	andi	r25, 0xF9	; 249
    19ca:	d9 2e       	mov	r13, r25
    19cc:	8f 36       	cpi	r24, 0x6F	; 111
    19ce:	f9 f0       	breq	.+62     	; 0x1a0e <vfprintf+0x2ec>
    19d0:	40 f4       	brcc	.+16     	; 0x19e2 <vfprintf+0x2c0>
    19d2:	88 35       	cpi	r24, 0x58	; 88
    19d4:	a1 f0       	breq	.+40     	; 0x19fe <vfprintf+0x2dc>
    19d6:	f7 01       	movw	r30, r14
    19d8:	86 81       	ldd	r24, Z+6	; 0x06
    19da:	97 81       	ldd	r25, Z+7	; 0x07
    19dc:	2b 96       	adiw	r28, 0x0b	; 11
    19de:	e2 e1       	ldi	r30, 0x12	; 18
    19e0:	1c c1       	rjmp	.+568    	; 0x1c1a <__epilogue_restores__>
    19e2:	80 37       	cpi	r24, 0x70	; 112
    19e4:	49 f0       	breq	.+18     	; 0x19f8 <vfprintf+0x2d6>
    19e6:	88 37       	cpi	r24, 0x78	; 120
    19e8:	b1 f7       	brne	.-20     	; 0x19d6 <vfprintf+0x2b4>
    19ea:	d4 fe       	sbrs	r13, 4
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <vfprintf+0x2d0>
    19ee:	68 94       	set
    19f0:	d2 f8       	bld	r13, 2
    19f2:	20 e1       	ldi	r18, 0x10	; 16
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	0d c0       	rjmp	.+26     	; 0x1a12 <vfprintf+0x2f0>
    19f8:	68 94       	set
    19fa:	d4 f8       	bld	r13, 4
    19fc:	f6 cf       	rjmp	.-20     	; 0x19ea <vfprintf+0x2c8>
    19fe:	54 fe       	sbrs	r5, 4
    1a00:	03 c0       	rjmp	.+6      	; 0x1a08 <vfprintf+0x2e6>
    1a02:	e9 2f       	mov	r30, r25
    1a04:	e6 60       	ori	r30, 0x06	; 6
    1a06:	de 2e       	mov	r13, r30
    1a08:	20 e1       	ldi	r18, 0x10	; 16
    1a0a:	32 e0       	ldi	r19, 0x02	; 2
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <vfprintf+0x2f0>
    1a0e:	28 e0       	ldi	r18, 0x08	; 8
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	f8 01       	movw	r30, r16
    1a14:	d7 fe       	sbrs	r13, 7
    1a16:	0c c0       	rjmp	.+24     	; 0x1a30 <vfprintf+0x30e>
    1a18:	61 91       	ld	r22, Z+
    1a1a:	71 91       	ld	r23, Z+
    1a1c:	81 91       	ld	r24, Z+
    1a1e:	91 91       	ld	r25, Z+
    1a20:	8f 01       	movw	r16, r30
    1a22:	a5 01       	movw	r20, r10
    1a24:	80 d0       	rcall	.+256    	; 0x1b26 <__ultoa_invert>
    1a26:	c8 2e       	mov	r12, r24
    1a28:	ca 18       	sub	r12, r10
    1a2a:	e8 94       	clt
    1a2c:	d7 f8       	bld	r13, 7
    1a2e:	70 cf       	rjmp	.-288    	; 0x1910 <vfprintf+0x1ee>
    1a30:	61 91       	ld	r22, Z+
    1a32:	71 91       	ld	r23, Z+
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	f3 cf       	rjmp	.-26     	; 0x1a20 <vfprintf+0x2fe>
    1a3a:	52 fc       	sbrc	r5, 2
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <vfprintf+0x320>
    1a3e:	83 94       	inc	r8
    1a40:	83 cf       	rjmp	.-250    	; 0x1948 <vfprintf+0x226>
    1a42:	83 94       	inc	r8
    1a44:	83 94       	inc	r8
    1a46:	80 cf       	rjmp	.-256    	; 0x1948 <vfprintf+0x226>
    1a48:	85 2d       	mov	r24, r5
    1a4a:	86 78       	andi	r24, 0x86	; 134
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <vfprintf+0x32e>
    1a4e:	7c cf       	rjmp	.-264    	; 0x1948 <vfprintf+0x226>
    1a50:	f6 cf       	rjmp	.-20     	; 0x1a3e <vfprintf+0x31c>
    1a52:	b7 01       	movw	r22, r14
    1a54:	80 e2       	ldi	r24, 0x20	; 32
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	36 d0       	rcall	.+108    	; 0x1ac6 <fputc>
    1a5a:	83 94       	inc	r8
    1a5c:	84 14       	cp	r8, r4
    1a5e:	c8 f3       	brcs	.-14     	; 0x1a52 <vfprintf+0x330>
    1a60:	31 2c       	mov	r3, r1
    1a62:	7f cf       	rjmp	.-258    	; 0x1962 <vfprintf+0x240>
    1a64:	34 2c       	mov	r3, r4
    1a66:	38 18       	sub	r3, r8
    1a68:	84 14       	cp	r8, r4
    1a6a:	08 f4       	brcc	.+2      	; 0x1a6e <vfprintf+0x34c>
    1a6c:	7a cf       	rjmp	.-268    	; 0x1962 <vfprintf+0x240>
    1a6e:	f8 cf       	rjmp	.-16     	; 0x1a60 <vfprintf+0x33e>
    1a70:	85 2d       	mov	r24, r5
    1a72:	86 78       	andi	r24, 0x86	; 134
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <vfprintf+0x356>
    1a76:	85 cf       	rjmp	.-246    	; 0x1982 <vfprintf+0x260>
    1a78:	8b e2       	ldi	r24, 0x2B	; 43
    1a7a:	51 fe       	sbrs	r5, 1
    1a7c:	80 e2       	ldi	r24, 0x20	; 32
    1a7e:	57 fc       	sbrc	r5, 7
    1a80:	8d e2       	ldi	r24, 0x2D	; 45
    1a82:	b7 01       	movw	r22, r14
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	7c cf       	rjmp	.-264    	; 0x1980 <vfprintf+0x25e>
    1a88:	b7 01       	movw	r22, r14
    1a8a:	80 e3       	ldi	r24, 0x30	; 48
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	1b d0       	rcall	.+54     	; 0x1ac6 <fputc>
    1a90:	9a 94       	dec	r9
    1a92:	77 cf       	rjmp	.-274    	; 0x1982 <vfprintf+0x260>
    1a94:	8f ef       	ldi	r24, 0xFF	; 255
    1a96:	9f ef       	ldi	r25, 0xFF	; 255
    1a98:	a1 cf       	rjmp	.-190    	; 0x19dc <vfprintf+0x2ba>

00001a9a <strnlen_P>:
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	05 90       	lpm	r0, Z+
    1a9e:	61 50       	subi	r22, 0x01	; 1
    1aa0:	70 40       	sbci	r23, 0x00	; 0
    1aa2:	01 10       	cpse	r0, r1
    1aa4:	d8 f7       	brcc	.-10     	; 0x1a9c <strnlen_P+0x2>
    1aa6:	80 95       	com	r24
    1aa8:	90 95       	com	r25
    1aaa:	8e 0f       	add	r24, r30
    1aac:	9f 1f       	adc	r25, r31
    1aae:	08 95       	ret

00001ab0 <strnlen>:
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	61 50       	subi	r22, 0x01	; 1
    1ab4:	70 40       	sbci	r23, 0x00	; 0
    1ab6:	01 90       	ld	r0, Z+
    1ab8:	01 10       	cpse	r0, r1
    1aba:	d8 f7       	brcc	.-10     	; 0x1ab2 <strnlen+0x2>
    1abc:	80 95       	com	r24
    1abe:	90 95       	com	r25
    1ac0:	8e 0f       	add	r24, r30
    1ac2:	9f 1f       	adc	r25, r31
    1ac4:	08 95       	ret

00001ac6 <fputc>:
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	18 2f       	mov	r17, r24
    1ad0:	09 2f       	mov	r16, r25
    1ad2:	eb 01       	movw	r28, r22
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	81 fd       	sbrc	r24, 1
    1ad8:	09 c0       	rjmp	.+18     	; 0x1aec <fputc+0x26>
    1ada:	1f ef       	ldi	r17, 0xFF	; 255
    1adc:	0f ef       	ldi	r16, 0xFF	; 255
    1ade:	81 2f       	mov	r24, r17
    1ae0:	90 2f       	mov	r25, r16
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret
    1aec:	82 ff       	sbrs	r24, 2
    1aee:	14 c0       	rjmp	.+40     	; 0x1b18 <fputc+0x52>
    1af0:	2e 81       	ldd	r18, Y+6	; 0x06
    1af2:	3f 81       	ldd	r19, Y+7	; 0x07
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	9d 81       	ldd	r25, Y+5	; 0x05
    1af8:	28 17       	cp	r18, r24
    1afa:	39 07       	cpc	r19, r25
    1afc:	3c f4       	brge	.+14     	; 0x1b0c <fputc+0x46>
    1afe:	e8 81       	ld	r30, Y
    1b00:	f9 81       	ldd	r31, Y+1	; 0x01
    1b02:	cf 01       	movw	r24, r30
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	99 83       	std	Y+1, r25	; 0x01
    1b08:	88 83       	st	Y, r24
    1b0a:	10 83       	st	Z, r17
    1b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	9f 83       	std	Y+7, r25	; 0x07
    1b14:	8e 83       	std	Y+6, r24	; 0x06
    1b16:	e3 cf       	rjmp	.-58     	; 0x1ade <fputc+0x18>
    1b18:	e8 85       	ldd	r30, Y+8	; 0x08
    1b1a:	f9 85       	ldd	r31, Y+9	; 0x09
    1b1c:	81 2f       	mov	r24, r17
    1b1e:	09 95       	icall
    1b20:	89 2b       	or	r24, r25
    1b22:	a1 f3       	breq	.-24     	; 0x1b0c <fputc+0x46>
    1b24:	da cf       	rjmp	.-76     	; 0x1ada <fputc+0x14>

00001b26 <__ultoa_invert>:
    1b26:	fa 01       	movw	r30, r20
    1b28:	aa 27       	eor	r26, r26
    1b2a:	28 30       	cpi	r18, 0x08	; 8
    1b2c:	51 f1       	breq	.+84     	; 0x1b82 <__ultoa_invert+0x5c>
    1b2e:	20 31       	cpi	r18, 0x10	; 16
    1b30:	81 f1       	breq	.+96     	; 0x1b92 <__ultoa_invert+0x6c>
    1b32:	e8 94       	clt
    1b34:	6f 93       	push	r22
    1b36:	6e 7f       	andi	r22, 0xFE	; 254
    1b38:	6e 5f       	subi	r22, 0xFE	; 254
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	af 4f       	sbci	r26, 0xFF	; 255
    1b42:	b1 e0       	ldi	r27, 0x01	; 1
    1b44:	3e d0       	rcall	.+124    	; 0x1bc2 <__ultoa_invert+0x9c>
    1b46:	b4 e0       	ldi	r27, 0x04	; 4
    1b48:	3c d0       	rcall	.+120    	; 0x1bc2 <__ultoa_invert+0x9c>
    1b4a:	67 0f       	add	r22, r23
    1b4c:	78 1f       	adc	r23, r24
    1b4e:	89 1f       	adc	r24, r25
    1b50:	9a 1f       	adc	r25, r26
    1b52:	a1 1d       	adc	r26, r1
    1b54:	68 0f       	add	r22, r24
    1b56:	79 1f       	adc	r23, r25
    1b58:	8a 1f       	adc	r24, r26
    1b5a:	91 1d       	adc	r25, r1
    1b5c:	a1 1d       	adc	r26, r1
    1b5e:	6a 0f       	add	r22, r26
    1b60:	71 1d       	adc	r23, r1
    1b62:	81 1d       	adc	r24, r1
    1b64:	91 1d       	adc	r25, r1
    1b66:	a1 1d       	adc	r26, r1
    1b68:	20 d0       	rcall	.+64     	; 0x1baa <__ultoa_invert+0x84>
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <__ultoa_invert+0x48>
    1b6c:	68 94       	set
    1b6e:	3f 91       	pop	r19
    1b70:	2a e0       	ldi	r18, 0x0A	; 10
    1b72:	26 9f       	mul	r18, r22
    1b74:	11 24       	eor	r1, r1
    1b76:	30 19       	sub	r19, r0
    1b78:	30 5d       	subi	r19, 0xD0	; 208
    1b7a:	31 93       	st	Z+, r19
    1b7c:	de f6       	brtc	.-74     	; 0x1b34 <__ultoa_invert+0xe>
    1b7e:	cf 01       	movw	r24, r30
    1b80:	08 95       	ret
    1b82:	46 2f       	mov	r20, r22
    1b84:	47 70       	andi	r20, 0x07	; 7
    1b86:	40 5d       	subi	r20, 0xD0	; 208
    1b88:	41 93       	st	Z+, r20
    1b8a:	b3 e0       	ldi	r27, 0x03	; 3
    1b8c:	0f d0       	rcall	.+30     	; 0x1bac <__ultoa_invert+0x86>
    1b8e:	c9 f7       	brne	.-14     	; 0x1b82 <__ultoa_invert+0x5c>
    1b90:	f6 cf       	rjmp	.-20     	; 0x1b7e <__ultoa_invert+0x58>
    1b92:	46 2f       	mov	r20, r22
    1b94:	4f 70       	andi	r20, 0x0F	; 15
    1b96:	40 5d       	subi	r20, 0xD0	; 208
    1b98:	4a 33       	cpi	r20, 0x3A	; 58
    1b9a:	18 f0       	brcs	.+6      	; 0x1ba2 <__ultoa_invert+0x7c>
    1b9c:	49 5d       	subi	r20, 0xD9	; 217
    1b9e:	31 fd       	sbrc	r19, 1
    1ba0:	40 52       	subi	r20, 0x20	; 32
    1ba2:	41 93       	st	Z+, r20
    1ba4:	02 d0       	rcall	.+4      	; 0x1baa <__ultoa_invert+0x84>
    1ba6:	a9 f7       	brne	.-22     	; 0x1b92 <__ultoa_invert+0x6c>
    1ba8:	ea cf       	rjmp	.-44     	; 0x1b7e <__ultoa_invert+0x58>
    1baa:	b4 e0       	ldi	r27, 0x04	; 4
    1bac:	a6 95       	lsr	r26
    1bae:	97 95       	ror	r25
    1bb0:	87 95       	ror	r24
    1bb2:	77 95       	ror	r23
    1bb4:	67 95       	ror	r22
    1bb6:	ba 95       	dec	r27
    1bb8:	c9 f7       	brne	.-14     	; 0x1bac <__ultoa_invert+0x86>
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	61 05       	cpc	r22, r1
    1bbe:	71 05       	cpc	r23, r1
    1bc0:	08 95       	ret
    1bc2:	9b 01       	movw	r18, r22
    1bc4:	ac 01       	movw	r20, r24
    1bc6:	0a 2e       	mov	r0, r26
    1bc8:	06 94       	lsr	r0
    1bca:	57 95       	ror	r21
    1bcc:	47 95       	ror	r20
    1bce:	37 95       	ror	r19
    1bd0:	27 95       	ror	r18
    1bd2:	ba 95       	dec	r27
    1bd4:	c9 f7       	brne	.-14     	; 0x1bc8 <__ultoa_invert+0xa2>
    1bd6:	62 0f       	add	r22, r18
    1bd8:	73 1f       	adc	r23, r19
    1bda:	84 1f       	adc	r24, r20
    1bdc:	95 1f       	adc	r25, r21
    1bde:	a0 1d       	adc	r26, r0
    1be0:	08 95       	ret

00001be2 <__prologue_saves__>:
    1be2:	2f 92       	push	r2
    1be4:	3f 92       	push	r3
    1be6:	4f 92       	push	r4
    1be8:	5f 92       	push	r5
    1bea:	6f 92       	push	r6
    1bec:	7f 92       	push	r7
    1bee:	8f 92       	push	r8
    1bf0:	9f 92       	push	r9
    1bf2:	af 92       	push	r10
    1bf4:	bf 92       	push	r11
    1bf6:	cf 92       	push	r12
    1bf8:	df 92       	push	r13
    1bfa:	ef 92       	push	r14
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	ca 1b       	sub	r28, r26
    1c0c:	db 0b       	sbc	r29, r27
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	09 94       	ijmp

00001c1a <__epilogue_restores__>:
    1c1a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c1c:	39 88       	ldd	r3, Y+17	; 0x11
    1c1e:	48 88       	ldd	r4, Y+16	; 0x10
    1c20:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c22:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c24:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c26:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c28:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c2c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c2e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c30:	df 80       	ldd	r13, Y+7	; 0x07
    1c32:	ee 80       	ldd	r14, Y+6	; 0x06
    1c34:	fd 80       	ldd	r15, Y+5	; 0x05
    1c36:	0c 81       	ldd	r16, Y+4	; 0x04
    1c38:	1b 81       	ldd	r17, Y+3	; 0x03
    1c3a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c3c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c3e:	ce 0f       	add	r28, r30
    1c40:	d1 1d       	adc	r29, r1
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	ed 01       	movw	r28, r26
    1c4e:	08 95       	ret

00001c50 <_exit>:
    1c50:	f8 94       	cli

00001c52 <__stop_program>:
    1c52:	ff cf       	rjmp	.-2      	; 0x1c52 <__stop_program>
